'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4961
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SegurosMarsh"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SegurosMarsh
    Inherits Global.System.Data.DataSet
    
    Private tableSegurosMARSH_Seguro As SegurosMARSH_SeguroDataTable
    
    Private tableSegurosMARSH_Configuracion As SegurosMARSH_ConfiguracionDataTable
    
    Private tableEllipse_OC As Ellipse_OCDataTable
    
    Private tableEllipse_Contratos As Ellipse_ContratosDataTable
    
    Private tableSegurosMARSH_Oc_Contrato As SegurosMARSH_Oc_ContratoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SegurosMARSH_Seguro")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_SeguroDataTable(ds.Tables("SegurosMARSH_Seguro")))
            End If
            If (Not (ds.Tables("SegurosMARSH_Configuracion")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_ConfiguracionDataTable(ds.Tables("SegurosMARSH_Configuracion")))
            End If
            If (Not (ds.Tables("Ellipse_OC")) Is Nothing) Then
                MyBase.Tables.Add(New Ellipse_OCDataTable(ds.Tables("Ellipse_OC")))
            End If
            If (Not (ds.Tables("Ellipse_Contratos")) Is Nothing) Then
                MyBase.Tables.Add(New Ellipse_ContratosDataTable(ds.Tables("Ellipse_Contratos")))
            End If
            If (Not (ds.Tables("SegurosMARSH_Oc_Contrato")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_Oc_ContratoDataTable(ds.Tables("SegurosMARSH_Oc_Contrato")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SegurosMARSH_Seguro() As SegurosMARSH_SeguroDataTable
        Get
            Return Me.tableSegurosMARSH_Seguro
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SegurosMARSH_Configuracion() As SegurosMARSH_ConfiguracionDataTable
        Get
            Return Me.tableSegurosMARSH_Configuracion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ellipse_OC() As Ellipse_OCDataTable
        Get
            Return Me.tableEllipse_OC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ellipse_Contratos() As Ellipse_ContratosDataTable
        Get
            Return Me.tableEllipse_Contratos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SegurosMARSH_Oc_Contrato() As SegurosMARSH_Oc_ContratoDataTable
        Get
            Return Me.tableSegurosMARSH_Oc_Contrato
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SegurosMarsh = CType(MyBase.Clone,SegurosMarsh)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SegurosMARSH_Seguro")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_SeguroDataTable(ds.Tables("SegurosMARSH_Seguro")))
            End If
            If (Not (ds.Tables("SegurosMARSH_Configuracion")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_ConfiguracionDataTable(ds.Tables("SegurosMARSH_Configuracion")))
            End If
            If (Not (ds.Tables("Ellipse_OC")) Is Nothing) Then
                MyBase.Tables.Add(New Ellipse_OCDataTable(ds.Tables("Ellipse_OC")))
            End If
            If (Not (ds.Tables("Ellipse_Contratos")) Is Nothing) Then
                MyBase.Tables.Add(New Ellipse_ContratosDataTable(ds.Tables("Ellipse_Contratos")))
            End If
            If (Not (ds.Tables("SegurosMARSH_Oc_Contrato")) Is Nothing) Then
                MyBase.Tables.Add(New SegurosMARSH_Oc_ContratoDataTable(ds.Tables("SegurosMARSH_Oc_Contrato")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSegurosMARSH_Seguro = CType(MyBase.Tables("SegurosMARSH_Seguro"),SegurosMARSH_SeguroDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSegurosMARSH_Seguro) Is Nothing) Then
                Me.tableSegurosMARSH_Seguro.InitVars
            End If
        End If
        Me.tableSegurosMARSH_Configuracion = CType(MyBase.Tables("SegurosMARSH_Configuracion"),SegurosMARSH_ConfiguracionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSegurosMARSH_Configuracion) Is Nothing) Then
                Me.tableSegurosMARSH_Configuracion.InitVars
            End If
        End If
        Me.tableEllipse_OC = CType(MyBase.Tables("Ellipse_OC"),Ellipse_OCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEllipse_OC) Is Nothing) Then
                Me.tableEllipse_OC.InitVars
            End If
        End If
        Me.tableEllipse_Contratos = CType(MyBase.Tables("Ellipse_Contratos"),Ellipse_ContratosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEllipse_Contratos) Is Nothing) Then
                Me.tableEllipse_Contratos.InitVars
            End If
        End If
        Me.tableSegurosMARSH_Oc_Contrato = CType(MyBase.Tables("SegurosMARSH_Oc_Contrato"),SegurosMARSH_Oc_ContratoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSegurosMARSH_Oc_Contrato) Is Nothing) Then
                Me.tableSegurosMARSH_Oc_Contrato.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SegurosMarsh"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SegurosMarsh.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSegurosMARSH_Seguro = New SegurosMARSH_SeguroDataTable
        MyBase.Tables.Add(Me.tableSegurosMARSH_Seguro)
        Me.tableSegurosMARSH_Configuracion = New SegurosMARSH_ConfiguracionDataTable
        MyBase.Tables.Add(Me.tableSegurosMARSH_Configuracion)
        Me.tableEllipse_OC = New Ellipse_OCDataTable
        MyBase.Tables.Add(Me.tableEllipse_OC)
        Me.tableEllipse_Contratos = New Ellipse_ContratosDataTable
        MyBase.Tables.Add(Me.tableEllipse_Contratos)
        Me.tableSegurosMARSH_Oc_Contrato = New SegurosMARSH_Oc_ContratoDataTable
        MyBase.Tables.Add(Me.tableSegurosMARSH_Oc_Contrato)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSegurosMARSH_Seguro() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSegurosMARSH_Configuracion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEllipse_OC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEllipse_Contratos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSegurosMARSH_Oc_Contrato() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SegurosMarsh = New SegurosMarsh
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SegurosMARSH_SeguroRowChangeEventHandler(ByVal sender As Object, ByVal e As SegurosMARSH_SeguroRowChangeEvent)
    
    Public Delegate Sub SegurosMARSH_ConfiguracionRowChangeEventHandler(ByVal sender As Object, ByVal e As SegurosMARSH_ConfiguracionRowChangeEvent)
    
    Public Delegate Sub Ellipse_OCRowChangeEventHandler(ByVal sender As Object, ByVal e As Ellipse_OCRowChangeEvent)
    
    Public Delegate Sub Ellipse_ContratosRowChangeEventHandler(ByVal sender As Object, ByVal e As Ellipse_ContratosRowChangeEvent)
    
    Public Delegate Sub SegurosMARSH_Oc_ContratoRowChangeEventHandler(ByVal sender As Object, ByVal e As SegurosMARSH_Oc_ContratoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SegurosMARSH_SeguroDataTable
        Inherits Global.System.Data.TypedTableBase(Of SegurosMARSH_SeguroRow)
        
        Private columnCod_contrat As Global.System.Data.DataColumn
        
        Private columnDistrito As Global.System.Data.DataColumn
        
        Private columnTipoContr As Global.System.Data.DataColumn
        
        Private columnVersion As Global.System.Data.DataColumn
        
        Private columnId_verificacion As Global.System.Data.DataColumn
        
        Private columnF_inicio_declaracion As Global.System.Data.DataColumn
        
        Private columnF_term_declaracion As Global.System.Data.DataColumn
        
        Private columnMont_declarado As Global.System.Data.DataColumn
        
        Private columnAprobado As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnURL_Certificado As Global.System.Data.DataColumn
        
        Private columnPrima_contrat As Global.System.Data.DataColumn
        
        Private columnEmailAviso As Global.System.Data.DataColumn
        
        Private columnEnviado As Global.System.Data.DataColumn
        
        Private columnFecha_Creacion As Global.System.Data.DataColumn
        
        Private columnVersion_Seguro As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SegurosMARSH_Seguro"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoContrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoContr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_verificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_verificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_inicio_declaracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_inicio_declaracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_term_declaracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_term_declaracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mont_declaradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMont_declarado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AprobadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAprobado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_CertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_Certificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Prima_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrima_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAvisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAviso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnviadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnviado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_CreacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Creacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Version_SeguroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersion_Seguro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SegurosMARSH_SeguroRow
            Get
                Return CType(Me.Rows(index),SegurosMARSH_SeguroRow)
            End Get
        End Property
        
        Public Event SegurosMARSH_SeguroRowChanging As SegurosMARSH_SeguroRowChangeEventHandler
        
        Public Event SegurosMARSH_SeguroRowChanged As SegurosMARSH_SeguroRowChangeEventHandler
        
        Public Event SegurosMARSH_SeguroRowDeleting As SegurosMARSH_SeguroRowChangeEventHandler
        
        Public Event SegurosMARSH_SeguroRowDeleted As SegurosMARSH_SeguroRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSegurosMARSH_SeguroRow(ByVal row As SegurosMARSH_SeguroRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSegurosMARSH_SeguroRow( _
                    ByVal Cod_contrat As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Id_verificacion As String,  _
                    ByVal F_inicio_declaracion As String,  _
                    ByVal F_term_declaracion As String,  _
                    ByVal Mont_declarado As Decimal,  _
                    ByVal Aprobado As String,  _
                    ByVal Motivo As String,  _
                    ByVal URL_Certificado As String,  _
                    ByVal Prima_contrat As Decimal,  _
                    ByVal EmailAviso As String,  _
                    ByVal Enviado As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Version_Seguro As String) As SegurosMARSH_SeguroRow
            Dim rowSegurosMARSH_SeguroRow As SegurosMARSH_SeguroRow = CType(Me.NewRow,SegurosMARSH_SeguroRow)
            Dim columnValuesArray() As Object = New Object() {Cod_contrat, Distrito, TipoContr, Version, Id_verificacion, F_inicio_declaracion, F_term_declaracion, Mont_declarado, Aprobado, Motivo, URL_Certificado, Prima_contrat, EmailAviso, Enviado, Fecha_Creacion, Version_Seguro}
            rowSegurosMARSH_SeguroRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSegurosMARSH_SeguroRow)
            Return rowSegurosMARSH_SeguroRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCod_contratDistritoTipoContrVersionId_verificacion(ByVal Cod_contrat As String, ByVal Distrito As String, ByVal TipoContr As String, ByVal Version As String, ByVal Id_verificacion As String) As SegurosMARSH_SeguroRow
            Return CType(Me.Rows.Find(New Object() {Cod_contrat, Distrito, TipoContr, Version, Id_verificacion}),SegurosMARSH_SeguroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SegurosMARSH_SeguroDataTable = CType(MyBase.Clone,SegurosMARSH_SeguroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SegurosMARSH_SeguroDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCod_contrat = MyBase.Columns("Cod_contrat")
            Me.columnDistrito = MyBase.Columns("Distrito")
            Me.columnTipoContr = MyBase.Columns("TipoContr")
            Me.columnVersion = MyBase.Columns("Version")
            Me.columnId_verificacion = MyBase.Columns("Id_verificacion")
            Me.columnF_inicio_declaracion = MyBase.Columns("F_inicio_declaracion")
            Me.columnF_term_declaracion = MyBase.Columns("F_term_declaracion")
            Me.columnMont_declarado = MyBase.Columns("Mont_declarado")
            Me.columnAprobado = MyBase.Columns("Aprobado")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnURL_Certificado = MyBase.Columns("URL_Certificado")
            Me.columnPrima_contrat = MyBase.Columns("Prima_contrat")
            Me.columnEmailAviso = MyBase.Columns("EmailAviso")
            Me.columnEnviado = MyBase.Columns("Enviado")
            Me.columnFecha_Creacion = MyBase.Columns("Fecha_Creacion")
            Me.columnVersion_Seguro = MyBase.Columns("Version_Seguro")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCod_contrat = New Global.System.Data.DataColumn("Cod_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_contrat)
            Me.columnDistrito = New Global.System.Data.DataColumn("Distrito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrito)
            Me.columnTipoContr = New Global.System.Data.DataColumn("TipoContr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoContr)
            Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersion)
            Me.columnId_verificacion = New Global.System.Data.DataColumn("Id_verificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_verificacion)
            Me.columnF_inicio_declaracion = New Global.System.Data.DataColumn("F_inicio_declaracion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_inicio_declaracion)
            Me.columnF_term_declaracion = New Global.System.Data.DataColumn("F_term_declaracion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_term_declaracion)
            Me.columnMont_declarado = New Global.System.Data.DataColumn("Mont_declarado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMont_declarado)
            Me.columnAprobado = New Global.System.Data.DataColumn("Aprobado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAprobado)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnURL_Certificado = New Global.System.Data.DataColumn("URL_Certificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_Certificado)
            Me.columnPrima_contrat = New Global.System.Data.DataColumn("Prima_contrat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrima_contrat)
            Me.columnEmailAviso = New Global.System.Data.DataColumn("EmailAviso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAviso)
            Me.columnEnviado = New Global.System.Data.DataColumn("Enviado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnviado)
            Me.columnFecha_Creacion = New Global.System.Data.DataColumn("Fecha_Creacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Creacion)
            Me.columnVersion_Seguro = New Global.System.Data.DataColumn("Version_Seguro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersion_Seguro)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCod_contrat, Me.columnDistrito, Me.columnTipoContr, Me.columnVersion, Me.columnId_verificacion}, true))
            Me.columnCod_contrat.AllowDBNull = false
            Me.columnCod_contrat.MaxLength = 20
            Me.columnDistrito.AllowDBNull = false
            Me.columnDistrito.MaxLength = 4
            Me.columnTipoContr.AllowDBNull = false
            Me.columnTipoContr.MaxLength = 2
            Me.columnVersion.AllowDBNull = false
            Me.columnVersion.MaxLength = 2
            Me.columnId_verificacion.AllowDBNull = false
            Me.columnId_verificacion.MaxLength = 23
            Me.columnF_inicio_declaracion.MaxLength = 50
            Me.columnF_term_declaracion.MaxLength = 50
            Me.columnAprobado.MaxLength = 2
            Me.columnMotivo.MaxLength = 250
            Me.columnURL_Certificado.MaxLength = 250
            Me.columnEmailAviso.MaxLength = 200
            Me.columnEnviado.MaxLength = 2
            Me.columnFecha_Creacion.MaxLength = 10
            Me.columnVersion_Seguro.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSegurosMARSH_SeguroRow() As SegurosMARSH_SeguroRow
            Return CType(Me.NewRow,SegurosMARSH_SeguroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SegurosMARSH_SeguroRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SegurosMARSH_SeguroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SegurosMARSH_SeguroRowChangedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_SeguroRowChanged(Me, New SegurosMARSH_SeguroRowChangeEvent(CType(e.Row,SegurosMARSH_SeguroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SegurosMARSH_SeguroRowChangingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_SeguroRowChanging(Me, New SegurosMARSH_SeguroRowChangeEvent(CType(e.Row,SegurosMARSH_SeguroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SegurosMARSH_SeguroRowDeletedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_SeguroRowDeleted(Me, New SegurosMARSH_SeguroRowChangeEvent(CType(e.Row,SegurosMARSH_SeguroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SegurosMARSH_SeguroRowDeletingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_SeguroRowDeleting(Me, New SegurosMARSH_SeguroRowChangeEvent(CType(e.Row,SegurosMARSH_SeguroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSegurosMARSH_SeguroRow(ByVal row As SegurosMARSH_SeguroRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SegurosMarsh = New SegurosMarsh
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SegurosMARSH_SeguroDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SegurosMARSH_ConfiguracionDataTable
        Inherits Global.System.Data.TypedTableBase(Of SegurosMARSH_ConfiguracionRow)
        
        Private columnTIPO_TABLA As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnValor As Global.System.Data.DataColumn
        
        Private columnValor2 As Global.System.Data.DataColumn
        
        Private columnValor3 As Global.System.Data.DataColumn
        
        Private columnValor4 As Global.System.Data.DataColumn
        
        Private columnValor5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SegurosMARSH_Configuracion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_TABLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_TABLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SegurosMARSH_ConfiguracionRow
            Get
                Return CType(Me.Rows(index),SegurosMARSH_ConfiguracionRow)
            End Get
        End Property
        
        Public Event SegurosMARSH_ConfiguracionRowChanging As SegurosMARSH_ConfiguracionRowChangeEventHandler
        
        Public Event SegurosMARSH_ConfiguracionRowChanged As SegurosMARSH_ConfiguracionRowChangeEventHandler
        
        Public Event SegurosMARSH_ConfiguracionRowDeleting As SegurosMARSH_ConfiguracionRowChangeEventHandler
        
        Public Event SegurosMARSH_ConfiguracionRowDeleted As SegurosMARSH_ConfiguracionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSegurosMARSH_ConfiguracionRow(ByVal row As SegurosMARSH_ConfiguracionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSegurosMARSH_ConfiguracionRow(ByVal TIPO_TABLA As String, ByVal Nombre As String, ByVal Valor As String, ByVal Valor2 As String, ByVal Valor3 As String, ByVal Valor4 As String, ByVal Valor5 As String) As SegurosMARSH_ConfiguracionRow
            Dim rowSegurosMARSH_ConfiguracionRow As SegurosMARSH_ConfiguracionRow = CType(Me.NewRow,SegurosMARSH_ConfiguracionRow)
            Dim columnValuesArray() As Object = New Object() {TIPO_TABLA, Nombre, Valor, Valor2, Valor3, Valor4, Valor5}
            rowSegurosMARSH_ConfiguracionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSegurosMARSH_ConfiguracionRow)
            Return rowSegurosMARSH_ConfiguracionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SegurosMARSH_ConfiguracionDataTable = CType(MyBase.Clone,SegurosMARSH_ConfiguracionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SegurosMARSH_ConfiguracionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTIPO_TABLA = MyBase.Columns("TIPO_TABLA")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnValor = MyBase.Columns("Valor")
            Me.columnValor2 = MyBase.Columns("Valor2")
            Me.columnValor3 = MyBase.Columns("Valor3")
            Me.columnValor4 = MyBase.Columns("Valor4")
            Me.columnValor5 = MyBase.Columns("Valor5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTIPO_TABLA = New Global.System.Data.DataColumn("TIPO_TABLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_TABLA)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnValor = New Global.System.Data.DataColumn("Valor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor)
            Me.columnValor2 = New Global.System.Data.DataColumn("Valor2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor2)
            Me.columnValor3 = New Global.System.Data.DataColumn("Valor3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor3)
            Me.columnValor4 = New Global.System.Data.DataColumn("Valor4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor4)
            Me.columnValor5 = New Global.System.Data.DataColumn("Valor5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor5)
            Me.columnTIPO_TABLA.AllowDBNull = false
            Me.columnTIPO_TABLA.MaxLength = 50
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnValor.AllowDBNull = false
            Me.columnValor.MaxLength = 2147483647
            Me.columnValor2.MaxLength = 2147483647
            Me.columnValor3.MaxLength = 2147483647
            Me.columnValor4.MaxLength = 2147483647
            Me.columnValor5.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSegurosMARSH_ConfiguracionRow() As SegurosMARSH_ConfiguracionRow
            Return CType(Me.NewRow,SegurosMARSH_ConfiguracionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SegurosMARSH_ConfiguracionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SegurosMARSH_ConfiguracionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SegurosMARSH_ConfiguracionRowChangedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_ConfiguracionRowChanged(Me, New SegurosMARSH_ConfiguracionRowChangeEvent(CType(e.Row,SegurosMARSH_ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SegurosMARSH_ConfiguracionRowChangingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_ConfiguracionRowChanging(Me, New SegurosMARSH_ConfiguracionRowChangeEvent(CType(e.Row,SegurosMARSH_ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SegurosMARSH_ConfiguracionRowDeletedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_ConfiguracionRowDeleted(Me, New SegurosMARSH_ConfiguracionRowChangeEvent(CType(e.Row,SegurosMARSH_ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SegurosMARSH_ConfiguracionRowDeletingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_ConfiguracionRowDeleting(Me, New SegurosMARSH_ConfiguracionRowChangeEvent(CType(e.Row,SegurosMARSH_ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSegurosMARSH_ConfiguracionRow(ByVal row As SegurosMARSH_ConfiguracionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SegurosMarsh = New SegurosMarsh
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SegurosMARSH_ConfiguracionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Ellipse_OCDataTable
        Inherits Global.System.Data.TypedTableBase(Of Ellipse_OCRow)
        
        Private columnDISTRITO As Global.System.Data.DataColumn
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnRESP_CONTRAT As Global.System.Data.DataColumn
        
        Private columnD_ANUAL As Global.System.Data.DataColumn
        
        Private columnF_INICIO_VIG As Global.System.Data.DataColumn
        
        Private columnF_TERM_VIG As Global.System.Data.DataColumn
        
        Private columnN_POLIZA As Global.System.Data.DataColumn
        
        Private columnRUT_CONT As Global.System.Data.DataColumn
        
        Private columnDIG_RUT_CONT As Global.System.Data.DataColumn
        
        Private columnR_SOC_CONT As Global.System.Data.DataColumn
        
        Private columnDIR_CONT As Global.System.Data.DataColumn
        
        Private columnCIUD_CONT As Global.System.Data.DataColumn
        
        Private columnNOMB_CONTACT As Global.System.Data.DataColumn
        
        Private columnCOD_CONTRAT As Global.System.Data.DataColumn
        
        Private columnMONT_CONTRAT As Global.System.Data.DataColumn
        
        Private columnTIP_CONTRAT As Global.System.Data.DataColumn
        
        Private columnDESCRIP_TRAB As Global.System.Data.DataColumn
        
        Private columnMONT_ORDEN_UF As Global.System.Data.DataColumn
        
        Private columnRESPONSABLE_CONT As Global.System.Data.DataColumn
        
        Private columnEMAIL_RESPONSABLE_CONT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ellipse_OC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTRITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTRITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESP_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESP_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_ANUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_ANUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_INICIO_VIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_INICIO_VIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_TERM_VIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_TERM_VIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_POLIZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_POLIZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUT_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUT_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIG_RUT_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIG_RUT_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R_SOC_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR_SOC_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIR_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIR_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIUD_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUD_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMB_CONTACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMB_CONTACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONT_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONT_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIP_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIP_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIP_TRABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIP_TRAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONT_ORDEN_UFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONT_ORDEN_UF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSABLE_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSABLE_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL_RESPONSABLE_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL_RESPONSABLE_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ellipse_OCRow
            Get
                Return CType(Me.Rows(index),Ellipse_OCRow)
            End Get
        End Property
        
        Public Event Ellipse_OCRowChanging As Ellipse_OCRowChangeEventHandler
        
        Public Event Ellipse_OCRowChanged As Ellipse_OCRowChangeEventHandler
        
        Public Event Ellipse_OCRowDeleting As Ellipse_OCRowChangeEventHandler
        
        Public Event Ellipse_OCRowDeleted As Ellipse_OCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEllipse_OCRow(ByVal row As Ellipse_OCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEllipse_OCRow( _
                    ByVal DISTRITO As String,  _
                    ByVal EMPRESA As String,  _
                    ByVal RESP_CONTRAT As String,  _
                    ByVal D_ANUAL As String,  _
                    ByVal F_INICIO_VIG As String,  _
                    ByVal F_TERM_VIG As String,  _
                    ByVal N_POLIZA As String,  _
                    ByVal RUT_CONT As String,  _
                    ByVal DIG_RUT_CONT As String,  _
                    ByVal R_SOC_CONT As String,  _
                    ByVal DIR_CONT As String,  _
                    ByVal CIUD_CONT As String,  _
                    ByVal NOMB_CONTACT As String,  _
                    ByVal COD_CONTRAT As String,  _
                    ByVal MONT_CONTRAT As Decimal,  _
                    ByVal TIP_CONTRAT As String,  _
                    ByVal DESCRIP_TRAB As String,  _
                    ByVal MONT_ORDEN_UF As Decimal,  _
                    ByVal RESPONSABLE_CONT As String,  _
                    ByVal EMAIL_RESPONSABLE_CONT As String) As Ellipse_OCRow
            Dim rowEllipse_OCRow As Ellipse_OCRow = CType(Me.NewRow,Ellipse_OCRow)
            Dim columnValuesArray() As Object = New Object() {DISTRITO, EMPRESA, RESP_CONTRAT, D_ANUAL, F_INICIO_VIG, F_TERM_VIG, N_POLIZA, RUT_CONT, DIG_RUT_CONT, R_SOC_CONT, DIR_CONT, CIUD_CONT, NOMB_CONTACT, COD_CONTRAT, MONT_CONTRAT, TIP_CONTRAT, DESCRIP_TRAB, MONT_ORDEN_UF, RESPONSABLE_CONT, EMAIL_RESPONSABLE_CONT}
            rowEllipse_OCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEllipse_OCRow)
            Return rowEllipse_OCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Ellipse_OCDataTable = CType(MyBase.Clone,Ellipse_OCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Ellipse_OCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDISTRITO = MyBase.Columns("DISTRITO")
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnRESP_CONTRAT = MyBase.Columns("RESP_CONTRAT")
            Me.columnD_ANUAL = MyBase.Columns("D_ANUAL")
            Me.columnF_INICIO_VIG = MyBase.Columns("F_INICIO_VIG")
            Me.columnF_TERM_VIG = MyBase.Columns("F_TERM_VIG")
            Me.columnN_POLIZA = MyBase.Columns("N_POLIZA")
            Me.columnRUT_CONT = MyBase.Columns("RUT_CONT")
            Me.columnDIG_RUT_CONT = MyBase.Columns("DIG_RUT_CONT")
            Me.columnR_SOC_CONT = MyBase.Columns("R_SOC_CONT")
            Me.columnDIR_CONT = MyBase.Columns("DIR_CONT")
            Me.columnCIUD_CONT = MyBase.Columns("CIUD_CONT")
            Me.columnNOMB_CONTACT = MyBase.Columns("NOMB_CONTACT")
            Me.columnCOD_CONTRAT = MyBase.Columns("COD_CONTRAT")
            Me.columnMONT_CONTRAT = MyBase.Columns("MONT_CONTRAT")
            Me.columnTIP_CONTRAT = MyBase.Columns("TIP_CONTRAT")
            Me.columnDESCRIP_TRAB = MyBase.Columns("DESCRIP_TRAB")
            Me.columnMONT_ORDEN_UF = MyBase.Columns("MONT_ORDEN_UF")
            Me.columnRESPONSABLE_CONT = MyBase.Columns("RESPONSABLE_CONT")
            Me.columnEMAIL_RESPONSABLE_CONT = MyBase.Columns("EMAIL_RESPONSABLE_CONT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDISTRITO = New Global.System.Data.DataColumn("DISTRITO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTRITO)
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnRESP_CONTRAT = New Global.System.Data.DataColumn("RESP_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESP_CONTRAT)
            Me.columnD_ANUAL = New Global.System.Data.DataColumn("D_ANUAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_ANUAL)
            Me.columnF_INICIO_VIG = New Global.System.Data.DataColumn("F_INICIO_VIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_INICIO_VIG)
            Me.columnF_TERM_VIG = New Global.System.Data.DataColumn("F_TERM_VIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_TERM_VIG)
            Me.columnN_POLIZA = New Global.System.Data.DataColumn("N_POLIZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_POLIZA)
            Me.columnRUT_CONT = New Global.System.Data.DataColumn("RUT_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUT_CONT)
            Me.columnDIG_RUT_CONT = New Global.System.Data.DataColumn("DIG_RUT_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIG_RUT_CONT)
            Me.columnR_SOC_CONT = New Global.System.Data.DataColumn("R_SOC_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR_SOC_CONT)
            Me.columnDIR_CONT = New Global.System.Data.DataColumn("DIR_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIR_CONT)
            Me.columnCIUD_CONT = New Global.System.Data.DataColumn("CIUD_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUD_CONT)
            Me.columnNOMB_CONTACT = New Global.System.Data.DataColumn("NOMB_CONTACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMB_CONTACT)
            Me.columnCOD_CONTRAT = New Global.System.Data.DataColumn("COD_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CONTRAT)
            Me.columnMONT_CONTRAT = New Global.System.Data.DataColumn("MONT_CONTRAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONT_CONTRAT)
            Me.columnTIP_CONTRAT = New Global.System.Data.DataColumn("TIP_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIP_CONTRAT)
            Me.columnDESCRIP_TRAB = New Global.System.Data.DataColumn("DESCRIP_TRAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIP_TRAB)
            Me.columnMONT_ORDEN_UF = New Global.System.Data.DataColumn("MONT_ORDEN_UF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONT_ORDEN_UF)
            Me.columnRESPONSABLE_CONT = New Global.System.Data.DataColumn("RESPONSABLE_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSABLE_CONT)
            Me.columnEMAIL_RESPONSABLE_CONT = New Global.System.Data.DataColumn("EMAIL_RESPONSABLE_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL_RESPONSABLE_CONT)
            Me.columnDISTRITO.AllowDBNull = false
            Me.columnDISTRITO.MaxLength = 4
            Me.columnEMPRESA.MaxLength = 14
            Me.columnRESP_CONTRAT.MaxLength = 20
            Me.columnD_ANUAL.MaxLength = 2
            Me.columnF_INICIO_VIG.MaxLength = 10
            Me.columnF_TERM_VIG.MaxLength = 10
            Me.columnN_POLIZA.MaxLength = 10
            Me.columnRUT_CONT.MaxLength = 14
            Me.columnDIG_RUT_CONT.MaxLength = 14
            Me.columnR_SOC_CONT.MaxLength = 100
            Me.columnDIR_CONT.MaxLength = 65
            Me.columnCIUD_CONT.MaxLength = 32
            Me.columnNOMB_CONTACT.AllowDBNull = false
            Me.columnNOMB_CONTACT.MaxLength = 32
            Me.columnCOD_CONTRAT.AllowDBNull = false
            Me.columnCOD_CONTRAT.MaxLength = 9
            Me.columnTIP_CONTRAT.MaxLength = 2
            Me.columnDESCRIP_TRAB.MaxLength = 163
            Me.columnRESPONSABLE_CONT.AllowDBNull = false
            Me.columnRESPONSABLE_CONT.MaxLength = 10
            Me.columnEMAIL_RESPONSABLE_CONT.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEllipse_OCRow() As Ellipse_OCRow
            Return CType(Me.NewRow,Ellipse_OCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Ellipse_OCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Ellipse_OCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ellipse_OCRowChangedEvent) Is Nothing) Then
                RaiseEvent Ellipse_OCRowChanged(Me, New Ellipse_OCRowChangeEvent(CType(e.Row,Ellipse_OCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ellipse_OCRowChangingEvent) Is Nothing) Then
                RaiseEvent Ellipse_OCRowChanging(Me, New Ellipse_OCRowChangeEvent(CType(e.Row,Ellipse_OCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ellipse_OCRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ellipse_OCRowDeleted(Me, New Ellipse_OCRowChangeEvent(CType(e.Row,Ellipse_OCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ellipse_OCRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ellipse_OCRowDeleting(Me, New Ellipse_OCRowChangeEvent(CType(e.Row,Ellipse_OCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEllipse_OCRow(ByVal row As Ellipse_OCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SegurosMarsh = New SegurosMarsh
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Ellipse_OCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Ellipse_ContratosDataTable
        Inherits Global.System.Data.TypedTableBase(Of Ellipse_ContratosRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnRESP_CONTRAT As Global.System.Data.DataColumn
        
        Private columnD_ANUAL As Global.System.Data.DataColumn
        
        Private columnF_INICIO_VIG As Global.System.Data.DataColumn
        
        Private columnF_TERM_VIG As Global.System.Data.DataColumn
        
        Private columnN_POLIZA As Global.System.Data.DataColumn
        
        Private columnRUT_CONT As Global.System.Data.DataColumn
        
        Private columnDIG_RUT_CONT As Global.System.Data.DataColumn
        
        Private columnR_SOC_CONT As Global.System.Data.DataColumn
        
        Private columnDIR_CONT As Global.System.Data.DataColumn
        
        Private columnCIUD_CONT As Global.System.Data.DataColumn
        
        Private columnNOMB_CONTACT As Global.System.Data.DataColumn
        
        Private columnCOD_CONTRAT As Global.System.Data.DataColumn
        
        Private columnMONT_CONTRAT As Global.System.Data.DataColumn
        
        Private columnTIP_CONTRAT As Global.System.Data.DataColumn
        
        Private columnDESCRIP_TRAB As Global.System.Data.DataColumn
        
        Private columnDISTRITO As Global.System.Data.DataColumn
        
        Private columnRESPONSABLE_CONT As Global.System.Data.DataColumn
        
        Private columnEMAIL_RESPONSABLE_CONT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ellipse_Contratos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESP_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESP_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_ANUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_ANUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_INICIO_VIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_INICIO_VIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_TERM_VIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_TERM_VIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_POLIZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_POLIZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUT_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUT_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIG_RUT_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIG_RUT_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R_SOC_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR_SOC_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIR_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIR_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIUD_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIUD_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMB_CONTACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMB_CONTACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONT_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONT_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIP_CONTRATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIP_CONTRAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIP_TRABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIP_TRAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTRITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTRITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSABLE_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSABLE_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL_RESPONSABLE_CONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL_RESPONSABLE_CONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ellipse_ContratosRow
            Get
                Return CType(Me.Rows(index),Ellipse_ContratosRow)
            End Get
        End Property
        
        Public Event Ellipse_ContratosRowChanging As Ellipse_ContratosRowChangeEventHandler
        
        Public Event Ellipse_ContratosRowChanged As Ellipse_ContratosRowChangeEventHandler
        
        Public Event Ellipse_ContratosRowDeleting As Ellipse_ContratosRowChangeEventHandler
        
        Public Event Ellipse_ContratosRowDeleted As Ellipse_ContratosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEllipse_ContratosRow(ByVal row As Ellipse_ContratosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEllipse_ContratosRow( _
                    ByVal EMPRESA As String,  _
                    ByVal RESP_CONTRAT As String,  _
                    ByVal D_ANUAL As String,  _
                    ByVal F_INICIO_VIG As String,  _
                    ByVal F_TERM_VIG As String,  _
                    ByVal N_POLIZA As String,  _
                    ByVal RUT_CONT As String,  _
                    ByVal DIG_RUT_CONT As String,  _
                    ByVal R_SOC_CONT As String,  _
                    ByVal DIR_CONT As String,  _
                    ByVal CIUD_CONT As String,  _
                    ByVal NOMB_CONTACT As String,  _
                    ByVal COD_CONTRAT As String,  _
                    ByVal MONT_CONTRAT As Decimal,  _
                    ByVal TIP_CONTRAT As String,  _
                    ByVal DESCRIP_TRAB As String,  _
                    ByVal DISTRITO As String,  _
                    ByVal RESPONSABLE_CONT As String,  _
                    ByVal EMAIL_RESPONSABLE_CONT As String) As Ellipse_ContratosRow
            Dim rowEllipse_ContratosRow As Ellipse_ContratosRow = CType(Me.NewRow,Ellipse_ContratosRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, RESP_CONTRAT, D_ANUAL, F_INICIO_VIG, F_TERM_VIG, N_POLIZA, RUT_CONT, DIG_RUT_CONT, R_SOC_CONT, DIR_CONT, CIUD_CONT, NOMB_CONTACT, COD_CONTRAT, MONT_CONTRAT, TIP_CONTRAT, DESCRIP_TRAB, DISTRITO, RESPONSABLE_CONT, EMAIL_RESPONSABLE_CONT}
            rowEllipse_ContratosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEllipse_ContratosRow)
            Return rowEllipse_ContratosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Ellipse_ContratosDataTable = CType(MyBase.Clone,Ellipse_ContratosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Ellipse_ContratosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnRESP_CONTRAT = MyBase.Columns("RESP_CONTRAT")
            Me.columnD_ANUAL = MyBase.Columns("D_ANUAL")
            Me.columnF_INICIO_VIG = MyBase.Columns("F_INICIO_VIG")
            Me.columnF_TERM_VIG = MyBase.Columns("F_TERM_VIG")
            Me.columnN_POLIZA = MyBase.Columns("N_POLIZA")
            Me.columnRUT_CONT = MyBase.Columns("RUT_CONT")
            Me.columnDIG_RUT_CONT = MyBase.Columns("DIG_RUT_CONT")
            Me.columnR_SOC_CONT = MyBase.Columns("R_SOC_CONT")
            Me.columnDIR_CONT = MyBase.Columns("DIR_CONT")
            Me.columnCIUD_CONT = MyBase.Columns("CIUD_CONT")
            Me.columnNOMB_CONTACT = MyBase.Columns("NOMB_CONTACT")
            Me.columnCOD_CONTRAT = MyBase.Columns("COD_CONTRAT")
            Me.columnMONT_CONTRAT = MyBase.Columns("MONT_CONTRAT")
            Me.columnTIP_CONTRAT = MyBase.Columns("TIP_CONTRAT")
            Me.columnDESCRIP_TRAB = MyBase.Columns("DESCRIP_TRAB")
            Me.columnDISTRITO = MyBase.Columns("DISTRITO")
            Me.columnRESPONSABLE_CONT = MyBase.Columns("RESPONSABLE_CONT")
            Me.columnEMAIL_RESPONSABLE_CONT = MyBase.Columns("EMAIL_RESPONSABLE_CONT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnRESP_CONTRAT = New Global.System.Data.DataColumn("RESP_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESP_CONTRAT)
            Me.columnD_ANUAL = New Global.System.Data.DataColumn("D_ANUAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_ANUAL)
            Me.columnF_INICIO_VIG = New Global.System.Data.DataColumn("F_INICIO_VIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_INICIO_VIG)
            Me.columnF_TERM_VIG = New Global.System.Data.DataColumn("F_TERM_VIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_TERM_VIG)
            Me.columnN_POLIZA = New Global.System.Data.DataColumn("N_POLIZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_POLIZA)
            Me.columnRUT_CONT = New Global.System.Data.DataColumn("RUT_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUT_CONT)
            Me.columnDIG_RUT_CONT = New Global.System.Data.DataColumn("DIG_RUT_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIG_RUT_CONT)
            Me.columnR_SOC_CONT = New Global.System.Data.DataColumn("R_SOC_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR_SOC_CONT)
            Me.columnDIR_CONT = New Global.System.Data.DataColumn("DIR_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIR_CONT)
            Me.columnCIUD_CONT = New Global.System.Data.DataColumn("CIUD_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIUD_CONT)
            Me.columnNOMB_CONTACT = New Global.System.Data.DataColumn("NOMB_CONTACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMB_CONTACT)
            Me.columnCOD_CONTRAT = New Global.System.Data.DataColumn("COD_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CONTRAT)
            Me.columnMONT_CONTRAT = New Global.System.Data.DataColumn("MONT_CONTRAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONT_CONTRAT)
            Me.columnTIP_CONTRAT = New Global.System.Data.DataColumn("TIP_CONTRAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIP_CONTRAT)
            Me.columnDESCRIP_TRAB = New Global.System.Data.DataColumn("DESCRIP_TRAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIP_TRAB)
            Me.columnDISTRITO = New Global.System.Data.DataColumn("DISTRITO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTRITO)
            Me.columnRESPONSABLE_CONT = New Global.System.Data.DataColumn("RESPONSABLE_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSABLE_CONT)
            Me.columnEMAIL_RESPONSABLE_CONT = New Global.System.Data.DataColumn("EMAIL_RESPONSABLE_CONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL_RESPONSABLE_CONT)
            Me.columnEMPRESA.MaxLength = 14
            Me.columnRESP_CONTRAT.MaxLength = 20
            Me.columnD_ANUAL.MaxLength = 2
            Me.columnF_INICIO_VIG.MaxLength = 10
            Me.columnF_TERM_VIG.MaxLength = 10
            Me.columnN_POLIZA.MaxLength = 20
            Me.columnRUT_CONT.MaxLength = 14
            Me.columnDIG_RUT_CONT.MaxLength = 14
            Me.columnR_SOC_CONT.MaxLength = 100
            Me.columnDIR_CONT.MaxLength = 65
            Me.columnCIUD_CONT.MaxLength = 32
            Me.columnNOMB_CONTACT.MaxLength = 32
            Me.columnCOD_CONTRAT.AllowDBNull = false
            Me.columnCOD_CONTRAT.MaxLength = 8
            Me.columnTIP_CONTRAT.MaxLength = 2
            Me.columnDESCRIP_TRAB.MaxLength = 40
            Me.columnDISTRITO.AllowDBNull = false
            Me.columnDISTRITO.MaxLength = 4
            Me.columnRESPONSABLE_CONT.MaxLength = 10
            Me.columnEMAIL_RESPONSABLE_CONT.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEllipse_ContratosRow() As Ellipse_ContratosRow
            Return CType(Me.NewRow,Ellipse_ContratosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Ellipse_ContratosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Ellipse_ContratosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ellipse_ContratosRowChangedEvent) Is Nothing) Then
                RaiseEvent Ellipse_ContratosRowChanged(Me, New Ellipse_ContratosRowChangeEvent(CType(e.Row,Ellipse_ContratosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ellipse_ContratosRowChangingEvent) Is Nothing) Then
                RaiseEvent Ellipse_ContratosRowChanging(Me, New Ellipse_ContratosRowChangeEvent(CType(e.Row,Ellipse_ContratosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ellipse_ContratosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ellipse_ContratosRowDeleted(Me, New Ellipse_ContratosRowChangeEvent(CType(e.Row,Ellipse_ContratosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ellipse_ContratosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ellipse_ContratosRowDeleting(Me, New Ellipse_ContratosRowChangeEvent(CType(e.Row,Ellipse_ContratosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEllipse_ContratosRow(ByVal row As Ellipse_ContratosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SegurosMarsh = New SegurosMarsh
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Ellipse_ContratosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SegurosMARSH_Oc_ContratoDataTable
        Inherits Global.System.Data.TypedTableBase(Of SegurosMARSH_Oc_ContratoRow)
        
        Private columnEmpresa As Global.System.Data.DataColumn
        
        Private columnResp_Contrat As Global.System.Data.DataColumn
        
        Private columnD_Anual As Global.System.Data.DataColumn
        
        Private columnF_inicio_vig As Global.System.Data.DataColumn
        
        Private columnF_term_vig As Global.System.Data.DataColumn
        
        Private columnN_poliza As Global.System.Data.DataColumn
        
        Private columnRut_cont As Global.System.Data.DataColumn
        
        Private columnDig_Rut_cont As Global.System.Data.DataColumn
        
        Private columnR_soc_cont As Global.System.Data.DataColumn
        
        Private columnDir_cont As Global.System.Data.DataColumn
        
        Private columnCiud_cont As Global.System.Data.DataColumn
        
        Private columnNomb_Contact As Global.System.Data.DataColumn
        
        Private columnCod_contrat As Global.System.Data.DataColumn
        
        Private columnMont_contrat As Global.System.Data.DataColumn
        
        Private columnTip_contrat As Global.System.Data.DataColumn
        
        Private columnDescrip_Trab As Global.System.Data.DataColumn
        
        Private columnDistrito As Global.System.Data.DataColumn
        
        Private columnTipoContr As Global.System.Data.DataColumn
        
        Private columnVersion As Global.System.Data.DataColumn
        
        Private columnFecha_Creacion As Global.System.Data.DataColumn
        
        Private columnCorreo_aviso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SegurosMARSH_Oc_Contrato"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Resp_ContratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResp_Contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_AnualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Anual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_inicio_vigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_inicio_vig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F_term_vigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnF_term_vig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_polizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_poliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rut_contColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRut_cont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dig_Rut_contColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDig_Rut_cont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R_soc_contColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnR_soc_cont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dir_contColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDir_cont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ciud_contColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiud_cont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nomb_ContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomb_Contact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mont_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMont_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tip_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTip_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descrip_TrabColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescrip_Trab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoContrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoContr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_CreacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_Creacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Correo_avisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCorreo_aviso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SegurosMARSH_Oc_ContratoRow
            Get
                Return CType(Me.Rows(index),SegurosMARSH_Oc_ContratoRow)
            End Get
        End Property
        
        Public Event SegurosMARSH_Oc_ContratoRowChanging As SegurosMARSH_Oc_ContratoRowChangeEventHandler
        
        Public Event SegurosMARSH_Oc_ContratoRowChanged As SegurosMARSH_Oc_ContratoRowChangeEventHandler
        
        Public Event SegurosMARSH_Oc_ContratoRowDeleting As SegurosMARSH_Oc_ContratoRowChangeEventHandler
        
        Public Event SegurosMARSH_Oc_ContratoRowDeleted As SegurosMARSH_Oc_ContratoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSegurosMARSH_Oc_ContratoRow(ByVal row As SegurosMARSH_Oc_ContratoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSegurosMARSH_Oc_ContratoRow( _
                    ByVal Empresa As String,  _
                    ByVal Resp_Contrat As String,  _
                    ByVal D_Anual As String,  _
                    ByVal F_inicio_vig As String,  _
                    ByVal F_term_vig As String,  _
                    ByVal N_poliza As String,  _
                    ByVal Rut_cont As String,  _
                    ByVal Dig_Rut_cont As String,  _
                    ByVal R_soc_cont As String,  _
                    ByVal Dir_cont As String,  _
                    ByVal Ciud_cont As String,  _
                    ByVal Nomb_Contact As String,  _
                    ByVal Cod_contrat As String,  _
                    ByVal Mont_contrat As Decimal,  _
                    ByVal Tip_contrat As String,  _
                    ByVal Descrip_Trab As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Correo_aviso As String) As SegurosMARSH_Oc_ContratoRow
            Dim rowSegurosMARSH_Oc_ContratoRow As SegurosMARSH_Oc_ContratoRow = CType(Me.NewRow,SegurosMARSH_Oc_ContratoRow)
            Dim columnValuesArray() As Object = New Object() {Empresa, Resp_Contrat, D_Anual, F_inicio_vig, F_term_vig, N_poliza, Rut_cont, Dig_Rut_cont, R_soc_cont, Dir_cont, Ciud_cont, Nomb_Contact, Cod_contrat, Mont_contrat, Tip_contrat, Descrip_Trab, Distrito, TipoContr, Version, Fecha_Creacion, Correo_aviso}
            rowSegurosMARSH_Oc_ContratoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSegurosMARSH_Oc_ContratoRow)
            Return rowSegurosMARSH_Oc_ContratoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCod_contratDistritoTipoContrVersion(ByVal Cod_contrat As String, ByVal Distrito As String, ByVal TipoContr As String, ByVal Version As String) As SegurosMARSH_Oc_ContratoRow
            Return CType(Me.Rows.Find(New Object() {Cod_contrat, Distrito, TipoContr, Version}),SegurosMARSH_Oc_ContratoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SegurosMARSH_Oc_ContratoDataTable = CType(MyBase.Clone,SegurosMARSH_Oc_ContratoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SegurosMARSH_Oc_ContratoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmpresa = MyBase.Columns("Empresa")
            Me.columnResp_Contrat = MyBase.Columns("Resp_Contrat")
            Me.columnD_Anual = MyBase.Columns("D_Anual")
            Me.columnF_inicio_vig = MyBase.Columns("F_inicio_vig")
            Me.columnF_term_vig = MyBase.Columns("F_term_vig")
            Me.columnN_poliza = MyBase.Columns("N_poliza")
            Me.columnRut_cont = MyBase.Columns("Rut_cont")
            Me.columnDig_Rut_cont = MyBase.Columns("Dig_Rut_cont")
            Me.columnR_soc_cont = MyBase.Columns("R_soc_cont")
            Me.columnDir_cont = MyBase.Columns("Dir_cont")
            Me.columnCiud_cont = MyBase.Columns("Ciud_cont")
            Me.columnNomb_Contact = MyBase.Columns("Nomb_Contact")
            Me.columnCod_contrat = MyBase.Columns("Cod_contrat")
            Me.columnMont_contrat = MyBase.Columns("Mont_contrat")
            Me.columnTip_contrat = MyBase.Columns("Tip_contrat")
            Me.columnDescrip_Trab = MyBase.Columns("Descrip_Trab")
            Me.columnDistrito = MyBase.Columns("Distrito")
            Me.columnTipoContr = MyBase.Columns("TipoContr")
            Me.columnVersion = MyBase.Columns("Version")
            Me.columnFecha_Creacion = MyBase.Columns("Fecha_Creacion")
            Me.columnCorreo_aviso = MyBase.Columns("Correo_aviso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmpresa = New Global.System.Data.DataColumn("Empresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresa)
            Me.columnResp_Contrat = New Global.System.Data.DataColumn("Resp_Contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResp_Contrat)
            Me.columnD_Anual = New Global.System.Data.DataColumn("D_Anual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Anual)
            Me.columnF_inicio_vig = New Global.System.Data.DataColumn("F_inicio_vig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_inicio_vig)
            Me.columnF_term_vig = New Global.System.Data.DataColumn("F_term_vig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF_term_vig)
            Me.columnN_poliza = New Global.System.Data.DataColumn("N_poliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_poliza)
            Me.columnRut_cont = New Global.System.Data.DataColumn("Rut_cont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRut_cont)
            Me.columnDig_Rut_cont = New Global.System.Data.DataColumn("Dig_Rut_cont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDig_Rut_cont)
            Me.columnR_soc_cont = New Global.System.Data.DataColumn("R_soc_cont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR_soc_cont)
            Me.columnDir_cont = New Global.System.Data.DataColumn("Dir_cont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDir_cont)
            Me.columnCiud_cont = New Global.System.Data.DataColumn("Ciud_cont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiud_cont)
            Me.columnNomb_Contact = New Global.System.Data.DataColumn("Nomb_Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomb_Contact)
            Me.columnCod_contrat = New Global.System.Data.DataColumn("Cod_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_contrat)
            Me.columnMont_contrat = New Global.System.Data.DataColumn("Mont_contrat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMont_contrat)
            Me.columnTip_contrat = New Global.System.Data.DataColumn("Tip_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTip_contrat)
            Me.columnDescrip_Trab = New Global.System.Data.DataColumn("Descrip_Trab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescrip_Trab)
            Me.columnDistrito = New Global.System.Data.DataColumn("Distrito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrito)
            Me.columnTipoContr = New Global.System.Data.DataColumn("TipoContr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoContr)
            Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersion)
            Me.columnFecha_Creacion = New Global.System.Data.DataColumn("Fecha_Creacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_Creacion)
            Me.columnCorreo_aviso = New Global.System.Data.DataColumn("Correo_aviso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCorreo_aviso)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCod_contrat, Me.columnDistrito, Me.columnTipoContr, Me.columnVersion}, true))
            Me.columnEmpresa.MaxLength = 15
            Me.columnResp_Contrat.MaxLength = 20
            Me.columnD_Anual.MaxLength = 2
            Me.columnF_inicio_vig.MaxLength = 10
            Me.columnF_term_vig.MaxLength = 10
            Me.columnN_poliza.AllowDBNull = false
            Me.columnN_poliza.MaxLength = 15
            Me.columnRut_cont.AllowDBNull = false
            Me.columnRut_cont.MaxLength = 10
            Me.columnDig_Rut_cont.AllowDBNull = false
            Me.columnDig_Rut_cont.MaxLength = 1
            Me.columnR_soc_cont.AllowDBNull = false
            Me.columnR_soc_cont.MaxLength = 100
            Me.columnDir_cont.AllowDBNull = false
            Me.columnDir_cont.MaxLength = 100
            Me.columnCiud_cont.MaxLength = 100
            Me.columnNomb_Contact.MaxLength = 100
            Me.columnCod_contrat.AllowDBNull = false
            Me.columnCod_contrat.MaxLength = 20
            Me.columnMont_contrat.AllowDBNull = false
            Me.columnTip_contrat.MaxLength = 2
            Me.columnDescrip_Trab.MaxLength = 255
            Me.columnDistrito.AllowDBNull = false
            Me.columnDistrito.MaxLength = 4
            Me.columnTipoContr.AllowDBNull = false
            Me.columnTipoContr.MaxLength = 1
            Me.columnVersion.AllowDBNull = false
            Me.columnVersion.MaxLength = 2
            Me.columnFecha_Creacion.MaxLength = 10
            Me.columnCorreo_aviso.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSegurosMARSH_Oc_ContratoRow() As SegurosMARSH_Oc_ContratoRow
            Return CType(Me.NewRow,SegurosMARSH_Oc_ContratoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SegurosMARSH_Oc_ContratoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SegurosMARSH_Oc_ContratoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SegurosMARSH_Oc_ContratoRowChangedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_Oc_ContratoRowChanged(Me, New SegurosMARSH_Oc_ContratoRowChangeEvent(CType(e.Row,SegurosMARSH_Oc_ContratoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SegurosMARSH_Oc_ContratoRowChangingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_Oc_ContratoRowChanging(Me, New SegurosMARSH_Oc_ContratoRowChangeEvent(CType(e.Row,SegurosMARSH_Oc_ContratoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SegurosMARSH_Oc_ContratoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_Oc_ContratoRowDeleted(Me, New SegurosMARSH_Oc_ContratoRowChangeEvent(CType(e.Row,SegurosMARSH_Oc_ContratoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SegurosMARSH_Oc_ContratoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SegurosMARSH_Oc_ContratoRowDeleting(Me, New SegurosMARSH_Oc_ContratoRowChangeEvent(CType(e.Row,SegurosMARSH_Oc_ContratoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSegurosMARSH_Oc_ContratoRow(ByVal row As SegurosMARSH_Oc_ContratoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SegurosMarsh = New SegurosMarsh
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SegurosMARSH_Oc_ContratoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SegurosMARSH_SeguroRow
        Inherits Global.System.Data.DataRow
        
        Private tableSegurosMARSH_Seguro As SegurosMARSH_SeguroDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSegurosMARSH_Seguro = CType(Me.Table,SegurosMARSH_SeguroDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_contrat() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Seguro.Cod_contratColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Cod_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distrito() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Seguro.DistritoColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.DistritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoContr() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Seguro.TipoContrColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.TipoContrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Version() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Seguro.VersionColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.VersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_verificacion() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Seguro.Id_verificacionColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Id_verificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_inicio_declaracion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.F_inicio_declaracionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_inicio_declaracion' de la tabla 'SegurosMARSH_Seguro' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.F_inicio_declaracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_term_declaracion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.F_term_declaracionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_term_declaracion' de la tabla 'SegurosMARSH_Seguro' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.F_term_declaracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mont_declarado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.Mont_declaradoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mont_declarado' de la tabla 'SegurosMARSH_Seguro' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Mont_declaradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aprobado() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.AprobadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Aprobado' de la tabla 'SegurosMARSH_Seguro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.AprobadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'SegurosMARSH_Seguro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_Certificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.URL_CertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'URL_Certificado' de la tabla 'SegurosMARSH_Seguro' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.URL_CertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prima_contrat() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.Prima_contratColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Prima_contrat' de la tabla 'SegurosMARSH_Seguro' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Prima_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAviso() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.EmailAvisoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EmailAviso' de la tabla 'SegurosMARSH_Seguro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.EmailAvisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enviado() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.EnviadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Enviado' de la tabla 'SegurosMARSH_Seguro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.EnviadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Creacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.Fecha_CreacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_Creacion' de la tabla 'SegurosMARSH_Seguro' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Fecha_CreacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Version_Seguro() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Seguro.Version_SeguroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Version_Seguro' de la tabla 'SegurosMARSH_Seguro' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Seguro.Version_SeguroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_inicio_declaracionNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.F_inicio_declaracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_inicio_declaracionNull()
            Me(Me.tableSegurosMARSH_Seguro.F_inicio_declaracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_term_declaracionNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.F_term_declaracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_term_declaracionNull()
            Me(Me.tableSegurosMARSH_Seguro.F_term_declaracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMont_declaradoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.Mont_declaradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMont_declaradoNull()
            Me(Me.tableSegurosMARSH_Seguro.Mont_declaradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAprobadoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.AprobadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAprobadoNull()
            Me(Me.tableSegurosMARSH_Seguro.AprobadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tableSegurosMARSH_Seguro.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsURL_CertificadoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.URL_CertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetURL_CertificadoNull()
            Me(Me.tableSegurosMARSH_Seguro.URL_CertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrima_contratNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.Prima_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrima_contratNull()
            Me(Me.tableSegurosMARSH_Seguro.Prima_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAvisoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.EmailAvisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAvisoNull()
            Me(Me.tableSegurosMARSH_Seguro.EmailAvisoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnviadoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.EnviadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnviadoNull()
            Me(Me.tableSegurosMARSH_Seguro.EnviadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_CreacionNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.Fecha_CreacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_CreacionNull()
            Me(Me.tableSegurosMARSH_Seguro.Fecha_CreacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersion_SeguroNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Seguro.Version_SeguroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersion_SeguroNull()
            Me(Me.tableSegurosMARSH_Seguro.Version_SeguroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SegurosMARSH_ConfiguracionRow
        Inherits Global.System.Data.DataRow
        
        Private tableSegurosMARSH_Configuracion As SegurosMARSH_ConfiguracionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSegurosMARSH_Configuracion = CType(Me.Table,SegurosMARSH_ConfiguracionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_TABLA() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Configuracion.TIPO_TABLAColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.TIPO_TABLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Configuracion.NombreColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Configuracion.ValorColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.ValorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Configuracion.Valor2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor2' de la tabla 'SegurosMARSH_Configuracion' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.Valor2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Configuracion.Valor3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor3' de la tabla 'SegurosMARSH_Configuracion' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.Valor3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor4() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Configuracion.Valor4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor4' de la tabla 'SegurosMARSH_Configuracion' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.Valor4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor5() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Configuracion.Valor5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor5' de la tabla 'SegurosMARSH_Configuracion' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Configuracion.Valor5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor2Null() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Configuracion.Valor2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor2Null()
            Me(Me.tableSegurosMARSH_Configuracion.Valor2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor3Null() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Configuracion.Valor3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor3Null()
            Me(Me.tableSegurosMARSH_Configuracion.Valor3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor4Null() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Configuracion.Valor4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor4Null()
            Me(Me.tableSegurosMARSH_Configuracion.Valor4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValor5Null() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Configuracion.Valor5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValor5Null()
            Me(Me.tableSegurosMARSH_Configuracion.Valor5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Ellipse_OCRow
        Inherits Global.System.Data.DataRow
        
        Private tableEllipse_OC As Ellipse_OCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEllipse_OC = CType(Me.Table,Ellipse_OCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTRITO() As String
            Get
                Return CType(Me(Me.tableEllipse_OC.DISTRITOColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_OC.DISTRITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EMPRESA' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESP_CONTRAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.RESP_CONTRATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESP_CONTRAT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.RESP_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_ANUAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.D_ANUALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'D_ANUAL' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.D_ANUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_INICIO_VIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.F_INICIO_VIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_INICIO_VIG' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.F_INICIO_VIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_TERM_VIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.F_TERM_VIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_TERM_VIG' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.F_TERM_VIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_POLIZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.N_POLIZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'N_POLIZA' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.N_POLIZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUT_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.RUT_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUT_CONT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.RUT_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIG_RUT_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.DIG_RUT_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIG_RUT_CONT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.DIG_RUT_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R_SOC_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.R_SOC_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'R_SOC_CONT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.R_SOC_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIR_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.DIR_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIR_CONT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.DIR_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIUD_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.CIUD_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIUD_CONT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.CIUD_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMB_CONTACT() As String
            Get
                Return CType(Me(Me.tableEllipse_OC.NOMB_CONTACTColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_OC.NOMB_CONTACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CONTRAT() As String
            Get
                Return CType(Me(Me.tableEllipse_OC.COD_CONTRATColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_OC.COD_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONT_CONTRAT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.MONT_CONTRATColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONT_CONTRAT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.MONT_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIP_CONTRAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.TIP_CONTRATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIP_CONTRAT' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.TIP_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIP_TRAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.DESCRIP_TRABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIP_TRAB' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.DESCRIP_TRABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONT_ORDEN_UF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.MONT_ORDEN_UFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONT_ORDEN_UF' de la tabla 'Ellipse_OC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.MONT_ORDEN_UFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSABLE_CONT() As String
            Get
                Return CType(Me(Me.tableEllipse_OC.RESPONSABLE_CONTColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_OC.RESPONSABLE_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL_RESPONSABLE_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_OC.EMAIL_RESPONSABLE_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EMAIL_RESPONSABLE_CONT' de la tabla 'Ellipse_OC' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_OC.EMAIL_RESPONSABLE_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMPRESANull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMPRESANull()
            Me(Me.tableEllipse_OC.EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESP_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.RESP_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESP_CONTRATNull()
            Me(Me.tableEllipse_OC.RESP_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_ANUALNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.D_ANUALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_ANUALNull()
            Me(Me.tableEllipse_OC.D_ANUALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_INICIO_VIGNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.F_INICIO_VIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_INICIO_VIGNull()
            Me(Me.tableEllipse_OC.F_INICIO_VIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_TERM_VIGNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.F_TERM_VIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_TERM_VIGNull()
            Me(Me.tableEllipse_OC.F_TERM_VIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsN_POLIZANull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.N_POLIZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetN_POLIZANull()
            Me(Me.tableEllipse_OC.N_POLIZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUT_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.RUT_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUT_CONTNull()
            Me(Me.tableEllipse_OC.RUT_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIG_RUT_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.DIG_RUT_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIG_RUT_CONTNull()
            Me(Me.tableEllipse_OC.DIG_RUT_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR_SOC_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.R_SOC_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR_SOC_CONTNull()
            Me(Me.tableEllipse_OC.R_SOC_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIR_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.DIR_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIR_CONTNull()
            Me(Me.tableEllipse_OC.DIR_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIUD_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.CIUD_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIUD_CONTNull()
            Me(Me.tableEllipse_OC.CIUD_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONT_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.MONT_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONT_CONTRATNull()
            Me(Me.tableEllipse_OC.MONT_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIP_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.TIP_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIP_CONTRATNull()
            Me(Me.tableEllipse_OC.TIP_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIP_TRABNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.DESCRIP_TRABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIP_TRABNull()
            Me(Me.tableEllipse_OC.DESCRIP_TRABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONT_ORDEN_UFNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.MONT_ORDEN_UFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONT_ORDEN_UFNull()
            Me(Me.tableEllipse_OC.MONT_ORDEN_UFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL_RESPONSABLE_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_OC.EMAIL_RESPONSABLE_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL_RESPONSABLE_CONTNull()
            Me(Me.tableEllipse_OC.EMAIL_RESPONSABLE_CONTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Ellipse_ContratosRow
        Inherits Global.System.Data.DataRow
        
        Private tableEllipse_Contratos As Ellipse_ContratosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEllipse_Contratos = CType(Me.Table,Ellipse_ContratosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EMPRESA' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESP_CONTRAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.RESP_CONTRATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESP_CONTRAT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.RESP_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_ANUAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.D_ANUALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'D_ANUAL' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.D_ANUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_INICIO_VIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.F_INICIO_VIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_INICIO_VIG' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.F_INICIO_VIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_TERM_VIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.F_TERM_VIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_TERM_VIG' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.F_TERM_VIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_POLIZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.N_POLIZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'N_POLIZA' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.N_POLIZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUT_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.RUT_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUT_CONT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.RUT_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIG_RUT_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.DIG_RUT_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIG_RUT_CONT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.DIG_RUT_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R_SOC_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.R_SOC_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'R_SOC_CONT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.R_SOC_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIR_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.DIR_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIR_CONT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.DIR_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIUD_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.CIUD_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIUD_CONT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.CIUD_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMB_CONTACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.NOMB_CONTACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMB_CONTACT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.NOMB_CONTACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CONTRAT() As String
            Get
                Return CType(Me(Me.tableEllipse_Contratos.COD_CONTRATColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_Contratos.COD_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONT_CONTRAT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.MONT_CONTRATColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONT_CONTRAT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.MONT_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIP_CONTRAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.TIP_CONTRATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIP_CONTRAT' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.TIP_CONTRATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIP_TRAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.DESCRIP_TRABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIP_TRAB' de la tabla 'Ellipse_Contratos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.DESCRIP_TRABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTRITO() As String
            Get
                Return CType(Me(Me.tableEllipse_Contratos.DISTRITOColumn),String)
            End Get
            Set
                Me(Me.tableEllipse_Contratos.DISTRITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSABLE_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.RESPONSABLE_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESPONSABLE_CONT' de la tabla 'Ellipse_Contratos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.RESPONSABLE_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL_RESPONSABLE_CONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEllipse_Contratos.EMAIL_RESPONSABLE_CONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EMAIL_RESPONSABLE_CONT' de la tabla 'Ellipse_Contratos' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEllipse_Contratos.EMAIL_RESPONSABLE_CONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMPRESANull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMPRESANull()
            Me(Me.tableEllipse_Contratos.EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESP_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.RESP_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESP_CONTRATNull()
            Me(Me.tableEllipse_Contratos.RESP_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_ANUALNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.D_ANUALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_ANUALNull()
            Me(Me.tableEllipse_Contratos.D_ANUALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_INICIO_VIGNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.F_INICIO_VIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_INICIO_VIGNull()
            Me(Me.tableEllipse_Contratos.F_INICIO_VIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_TERM_VIGNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.F_TERM_VIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_TERM_VIGNull()
            Me(Me.tableEllipse_Contratos.F_TERM_VIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsN_POLIZANull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.N_POLIZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetN_POLIZANull()
            Me(Me.tableEllipse_Contratos.N_POLIZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUT_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.RUT_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUT_CONTNull()
            Me(Me.tableEllipse_Contratos.RUT_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIG_RUT_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.DIG_RUT_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIG_RUT_CONTNull()
            Me(Me.tableEllipse_Contratos.DIG_RUT_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR_SOC_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.R_SOC_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR_SOC_CONTNull()
            Me(Me.tableEllipse_Contratos.R_SOC_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIR_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.DIR_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIR_CONTNull()
            Me(Me.tableEllipse_Contratos.DIR_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIUD_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.CIUD_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIUD_CONTNull()
            Me(Me.tableEllipse_Contratos.CIUD_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMB_CONTACTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.NOMB_CONTACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMB_CONTACTNull()
            Me(Me.tableEllipse_Contratos.NOMB_CONTACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONT_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.MONT_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONT_CONTRATNull()
            Me(Me.tableEllipse_Contratos.MONT_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIP_CONTRATNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.TIP_CONTRATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIP_CONTRATNull()
            Me(Me.tableEllipse_Contratos.TIP_CONTRATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIP_TRABNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.DESCRIP_TRABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIP_TRABNull()
            Me(Me.tableEllipse_Contratos.DESCRIP_TRABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSABLE_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.RESPONSABLE_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSABLE_CONTNull()
            Me(Me.tableEllipse_Contratos.RESPONSABLE_CONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL_RESPONSABLE_CONTNull() As Boolean
            Return Me.IsNull(Me.tableEllipse_Contratos.EMAIL_RESPONSABLE_CONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL_RESPONSABLE_CONTNull()
            Me(Me.tableEllipse_Contratos.EMAIL_RESPONSABLE_CONTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SegurosMARSH_Oc_ContratoRow
        Inherits Global.System.Data.DataRow
        
        Private tableSegurosMARSH_Oc_Contrato As SegurosMARSH_Oc_ContratoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSegurosMARSH_Oc_Contrato = CType(Me.Table,SegurosMARSH_Oc_ContratoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.EmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Empresa' de la tabla 'SegurosMARSH_Oc_Contrato' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.EmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resp_Contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Resp_ContratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resp_Contrat' de la tabla 'SegurosMARSH_Oc_Contrato' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Resp_ContratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Anual() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.D_AnualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'D_Anual' de la tabla 'SegurosMARSH_Oc_Contrato' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.D_AnualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_inicio_vig() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.F_inicio_vigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_inicio_vig' de la tabla 'SegurosMARSH_Oc_Contrato' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.F_inicio_vigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F_term_vig() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.F_term_vigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'F_term_vig' de la tabla 'SegurosMARSH_Oc_Contrato' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.F_term_vigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_poliza() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.N_polizaColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.N_polizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rut_cont() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Rut_contColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Rut_contColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dig_Rut_cont() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Dig_Rut_contColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Dig_Rut_contColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R_soc_cont() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.R_soc_contColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.R_soc_contColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dir_cont() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Dir_contColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Dir_contColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciud_cont() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Ciud_contColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ciud_cont' de la tabla 'SegurosMARSH_Oc_Contrato' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Ciud_contColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nomb_Contact() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Nomb_ContactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nomb_Contact' de la tabla 'SegurosMARSH_Oc_Contrato' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Nomb_ContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_contrat() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Cod_contratColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Cod_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mont_contrat() As Decimal
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Mont_contratColumn),Decimal)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Mont_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tip_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Tip_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tip_contrat' de la tabla 'SegurosMARSH_Oc_Contrato' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Tip_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descrip_Trab() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Descrip_TrabColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descrip_Trab' de la tabla 'SegurosMARSH_Oc_Contrato' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Descrip_TrabColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Distrito() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.DistritoColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.DistritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoContr() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.TipoContrColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.TipoContrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Version() As String
            Get
                Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.VersionColumn),String)
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.VersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_Creacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Fecha_CreacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha_Creacion' de la tabla 'SegurosMARSH_Oc_Contrato' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Fecha_CreacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Correo_aviso() As String
            Get
                Try 
                    Return CType(Me(Me.tableSegurosMARSH_Oc_Contrato.Correo_avisoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Correo_aviso' de la tabla 'SegurosMARSH_Oc_Contrato' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSegurosMARSH_Oc_Contrato.Correo_avisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.EmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.EmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResp_ContratNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Resp_ContratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResp_ContratNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Resp_ContratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_AnualNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.D_AnualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_AnualNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.D_AnualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_inicio_vigNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.F_inicio_vigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_inicio_vigNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.F_inicio_vigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF_term_vigNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.F_term_vigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF_term_vigNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.F_term_vigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiud_contNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Ciud_contColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiud_contNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Ciud_contColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomb_ContactNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Nomb_ContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomb_ContactNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Nomb_ContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTip_contratNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Tip_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTip_contratNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Tip_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescrip_TrabNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Descrip_TrabColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescrip_TrabNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Descrip_TrabColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_CreacionNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Fecha_CreacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_CreacionNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Fecha_CreacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCorreo_avisoNull() As Boolean
            Return Me.IsNull(Me.tableSegurosMARSH_Oc_Contrato.Correo_avisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCorreo_avisoNull()
            Me(Me.tableSegurosMARSH_Oc_Contrato.Correo_avisoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SegurosMARSH_SeguroRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SegurosMARSH_SeguroRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SegurosMARSH_SeguroRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SegurosMARSH_SeguroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SegurosMARSH_ConfiguracionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SegurosMARSH_ConfiguracionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SegurosMARSH_ConfiguracionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SegurosMARSH_ConfiguracionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Ellipse_OCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Ellipse_OCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Ellipse_OCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Ellipse_OCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Ellipse_ContratosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Ellipse_ContratosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Ellipse_ContratosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Ellipse_ContratosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SegurosMARSH_Oc_ContratoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SegurosMARSH_Oc_ContratoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SegurosMARSH_Oc_ContratoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SegurosMARSH_Oc_ContratoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SegurosMarshTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SegurosMARSH_SeguroTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SegurosMARSH_Seguro"
            tableMapping.ColumnMappings.Add("Cod_contrat", "Cod_contrat")
            tableMapping.ColumnMappings.Add("Distrito", "Distrito")
            tableMapping.ColumnMappings.Add("TipoContr", "TipoContr")
            tableMapping.ColumnMappings.Add("Version", "Version")
            tableMapping.ColumnMappings.Add("Id_verificacion", "Id_verificacion")
            tableMapping.ColumnMappings.Add("F_inicio_declaracion", "F_inicio_declaracion")
            tableMapping.ColumnMappings.Add("F_term_declaracion", "F_term_declaracion")
            tableMapping.ColumnMappings.Add("Mont_declarado", "Mont_declarado")
            tableMapping.ColumnMappings.Add("Aprobado", "Aprobado")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("URL_Certificado", "URL_Certificado")
            tableMapping.ColumnMappings.Add("Prima_contrat", "Prima_contrat")
            tableMapping.ColumnMappings.Add("EmailAviso", "EmailAviso")
            tableMapping.ColumnMappings.Add("Enviado", "Enviado")
            tableMapping.ColumnMappings.Add("Fecha_Creacion", "Fecha_Creacion")
            tableMapping.ColumnMappings.Add("Version_Seguro", "Version_Seguro")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Seguro] WHERE (([Cod_contrat] = @Original_Cod_contrat) AND ([Distrit"& _ 
                "o] = @Original_Distrito) AND ([TipoContr] = @Original_TipoContr) AND ([Version] "& _ 
                "= @Original_Version) AND ([Id_verificacion] = @Original_Id_verificacion) AND ((@"& _ 
                "IsNull_F_inicio_declaracion = 1 AND [F_inicio_declaracion] IS NULL) OR ([F_inici"& _ 
                "o_declaracion] = @Original_F_inicio_declaracion)) AND ((@IsNull_F_term_declaraci"& _ 
                "on = 1 AND [F_term_declaracion] IS NULL) OR ([F_term_declaracion] = @Original_F_"& _ 
                "term_declaracion)) AND ((@IsNull_Prima_contrat = 1 AND [Prima_contrat] IS NULL) "& _ 
                "OR ([Prima_contrat] = @Original_Prima_contrat)) AND ((@IsNull_Mont_declarado = 1"& _ 
                " AND [Mont_declarado] IS NULL) OR ([Mont_declarado] = @Original_Mont_declarado))"& _ 
                " AND ((@IsNull_Aprobado = 1 AND [Aprobado] IS NULL) OR ([Aprobado] = @Original_A"& _ 
                "probado)) AND ((@IsNull_Motivo = 1 AND [Motivo] IS NULL) OR ([Motivo] = @Origina"& _ 
                "l_Motivo)) AND ((@IsNull_URL_Certificado = 1 AND [URL_Certificado] IS NULL) OR ("& _ 
                "[URL_Certificado] = @Original_URL_Certificado)) AND ((@IsNull_EmailAviso = 1 AND"& _ 
                " [EmailAviso] IS NULL) OR ([EmailAviso] = @Original_EmailAviso)) AND ((@IsNull_E"& _ 
                "nviado = 1 AND [Enviado] IS NULL) OR ([Enviado] = @Original_Enviado)) AND ((@IsN"& _ 
                "ull_Fecha_Creacion = 1 AND [Fecha_Creacion] IS NULL) OR ([Fecha_Creacion] = @Ori"& _ 
                "ginal_Fecha_Creacion)) AND ((@IsNull_Version_Seguro = 1 AND [Version_Seguro] IS "& _ 
                "NULL) OR ([Version_Seguro] = @Original_Version_Seguro)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Id_verificacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Id_verificacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_inicio_declaracion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_inicio_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_term_declaracion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_term_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prima_contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prima_contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prima_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Prima_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Mont_declarado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mont_declarado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mont_declarado", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_declarado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Aprobado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Aprobado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Motivo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_Certificado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_Certificado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EmailAviso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailAviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Enviado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enviado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha_Creacion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Version_Seguro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version_Seguro", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Seguro] ([Cod_contrat], [Distrito], [TipoContr], [Version], [Id_veri"& _ 
                "ficacion], [F_inicio_declaracion], [F_term_declaracion], [Prima_contrat], [Mont_"& _ 
                "declarado], [Aprobado], [Motivo], [URL_Certificado], [EmailAviso], [Enviado], [F"& _ 
                "echa_Creacion], [Version_Seguro]) VALUES (@Cod_contrat, @Distrito, @TipoContr, @"& _ 
                "Version, @Id_verificacion, @F_inicio_declaracion, @F_term_declaracion, @Prima_co"& _ 
                "ntrat, @Mont_declarado, @Aprobado, @Motivo, @URL_Certificado, @EmailAviso, @Envi"& _ 
                "ado, @Fecha_Creacion, @Version_Seguro);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Cod_contrat, Distrito, TipoContr"& _ 
                ", Version, Id_verificacion, F_inicio_declaracion, F_term_declaracion, Prima_cont"& _ 
                "rat, Mont_declarado, Aprobado, Motivo, URL_Certificado, EmailAviso, Enviado, Fec"& _ 
                "ha_Creacion, Version_Seguro FROM Seguro WHERE (Cod_contrat = @Cod_contrat) AND ("& _ 
                "Distrito = @Distrito) AND (Id_verificacion = @Id_verificacion) AND (TipoContr = "& _ 
                "@TipoContr) AND (Version = @Version) ORDER BY EmailAviso"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Id_verificacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Id_verificacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_inicio_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_term_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prima_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Prima_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mont_declarado", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_declarado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aprobado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_Certificado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enviado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version_Seguro", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Seguro] SET [Cod_contrat] = @Cod_contrat, [Distrito] = @Distrito, [TipoCo"& _ 
                "ntr] = @TipoContr, [Version] = @Version, [Id_verificacion] = @Id_verificacion, ["& _ 
                "F_inicio_declaracion] = @F_inicio_declaracion, [F_term_declaracion] = @F_term_de"& _ 
                "claracion, [Prima_contrat] = @Prima_contrat, [Mont_declarado] = @Mont_declarado,"& _ 
                " [Aprobado] = @Aprobado, [Motivo] = @Motivo, [URL_Certificado] = @URL_Certificad"& _ 
                "o, [EmailAviso] = @EmailAviso, [Enviado] = @Enviado, [Fecha_Creacion] = @Fecha_C"& _ 
                "reacion, [Version_Seguro] = @Version_Seguro WHERE (([Cod_contrat] = @Original_Co"& _ 
                "d_contrat) AND ([Distrito] = @Original_Distrito) AND ([TipoContr] = @Original_Ti"& _ 
                "poContr) AND ([Version] = @Original_Version) AND ([Id_verificacion] = @Original_"& _ 
                "Id_verificacion) AND ((@IsNull_F_inicio_declaracion = 1 AND [F_inicio_declaracio"& _ 
                "n] IS NULL) OR ([F_inicio_declaracion] = @Original_F_inicio_declaracion)) AND (("& _ 
                "@IsNull_F_term_declaracion = 1 AND [F_term_declaracion] IS NULL) OR ([F_term_dec"& _ 
                "laracion] = @Original_F_term_declaracion)) AND ((@IsNull_Prima_contrat = 1 AND ["& _ 
                "Prima_contrat] IS NULL) OR ([Prima_contrat] = @Original_Prima_contrat)) AND ((@I"& _ 
                "sNull_Mont_declarado = 1 AND [Mont_declarado] IS NULL) OR ([Mont_declarado] = @O"& _ 
                "riginal_Mont_declarado)) AND ((@IsNull_Aprobado = 1 AND [Aprobado] IS NULL) OR ("& _ 
                "[Aprobado] = @Original_Aprobado)) AND ((@IsNull_Motivo = 1 AND [Motivo] IS NULL)"& _ 
                " OR ([Motivo] = @Original_Motivo)) AND ((@IsNull_URL_Certificado = 1 AND [URL_Ce"& _ 
                "rtificado] IS NULL) OR ([URL_Certificado] = @Original_URL_Certificado)) AND ((@I"& _ 
                "sNull_EmailAviso = 1 AND [EmailAviso] IS NULL) OR ([EmailAviso] = @Original_Emai"& _ 
                "lAviso)) AND ((@IsNull_Enviado = 1 AND [Enviado] IS NULL) OR ([Enviado] = @Origi"& _ 
                "nal_Enviado)) AND ((@IsNull_Fecha_Creacion = 1 AND [Fecha_Creacion] IS NULL) OR "& _ 
                "([Fecha_Creacion] = @Original_Fecha_Creacion)) AND ((@IsNull_Version_Seguro = 1 "& _ 
                "AND [Version_Seguro] IS NULL) OR ([Version_Seguro] = @Original_Version_Seguro)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Cod_contrat, Distrito, TipoContr, Version, Id_verificacion, F_inicio_d"& _ 
                "eclaracion, F_term_declaracion, Prima_contrat, Mont_declarado, Aprobado, Motivo,"& _ 
                " URL_Certificado, EmailAviso, Enviado, Fecha_Creacion, Version_Seguro FROM Segur"& _ 
                "o WHERE (Cod_contrat = @Cod_contrat) AND (Distrito = @Distrito) AND (Id_verifica"& _ 
                "cion = @Id_verificacion) AND (TipoContr = @TipoContr) AND (Version = @Version) O"& _ 
                "RDER BY EmailAviso"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Id_verificacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Id_verificacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_inicio_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_term_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Prima_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Prima_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mont_declarado", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_declarado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aprobado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_Certificado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enviado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version_Seguro", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Id_verificacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Id_verificacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_inicio_declaracion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_inicio_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_declaracion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_term_declaracion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_term_declaracion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_declaracion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Prima_contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Prima_contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Prima_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Prima_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Mont_declarado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mont_declarado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mont_declarado", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_declarado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Aprobado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Aprobado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aprobado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Motivo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_Certificado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_Certificado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_Certificado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EmailAviso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailAviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAviso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Enviado", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enviado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enviado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha_Creacion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Version_Seguro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version_Seguro", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version_Seguro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.InterfazSegurosMARSH.My.MySettings.Default.SegurosMARSHConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Cod_contrat, Distrito, TipoContr, Version, Id_verificacion, F_inici"& _ 
                "o_declaracion, F_term_declaracion, Prima_contrat, Mont_declarado, Aprobado, Moti"& _ 
                "vo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         URL_Certificado, EmailAviso, Enviado, Fecha_Creac"& _ 
                "ion, Version_Seguro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Seguro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY EmailAviso"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       Seguro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Enviado = 'SI'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (EmailAviso "& _ 
                "<> '') AND (Enviado <> 'SI'); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Aprobado, Cod_contrat, Distrito, EmailAviso, Enviado, F_inicio_declaracion"& _ 
                ", F_term_declaracion, Fecha_Creacion, Id_verificacion, Mont_declarado, Motivo, P"& _ 
                "rima_contrat, TipoContr, URL_Certificado, Version, Version_Seguro FROM Seguro WH"& _ 
                "ERE (EmailAviso <> '') AND (Enviado <> 'SI') ORDER BY EmailAviso"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        MAX(Version_Seguro) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Seguro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "(Distrito = @Distrito) AND (Cod_contrat = @OC_CONT_CODIGO) AND (TipoContr = @Tip"& _ 
                "oCont_OC) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (Aprobado = 'Si')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY TipoContr"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OC_CONT_CODIGO", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoCont_OC", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "INSERT INTO Seguro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (Cod_contrat, Distrito, TipoContr, V"& _ 
                "ersion, Id_verificacion, Aprobado, Motivo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        Cod_Contrat, Distrito,"& _ 
                " TipoContr, MIN(Version) AS Expr1, ID_Verificacion, 'NO' AS Expr2, 'Fila Reempla"& _ 
                "zada por otra version' AS Expr3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            (SELECT        Cod_contrat, Dis"& _ 
                "trito, TipoContr, Version, 'IN' + Cod_contrat AS ID_Verificacion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "            FROM            Oc_Contrato AS a"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          WHERE   "& _ 
                "     (Cod_contrat NOT IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                      "& _ 
                "  (SELECT        Cod_contrat"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  "& _ 
                "        FROM            Seguro AS b"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                           "& _ 
                "               WHERE        (Distrito = a.Distrito) AND (a.Version = Version))))"& _ 
                " AS G"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Cod_contrat, Distrito, TipoContr, ID_Verificacion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"HAVING       "& _ 
                " (COUNT(*) >= 2)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataSeguro() As SegurosMarsh.SegurosMARSH_SeguroDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SegurosMarsh.SegurosMARSH_SeguroDataTable = New SegurosMarsh.SegurosMARSH_SeguroDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetSegurosPorCorreo() As SegurosMarsh.SegurosMARSH_SeguroDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As SegurosMarsh.SegurosMARSH_SeguroDataTable = New SegurosMarsh.SegurosMARSH_SeguroDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SegurosMarsh.SegurosMARSH_SeguroDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SegurosMarsh) As Integer
            Return Me.Adapter.Update(dataSet, "SegurosMARSH_Seguro")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Id_verificacion As String,  _
                    ByVal Original_F_inicio_declaracion As String,  _
                    ByVal Original_F_term_declaracion As String,  _
                    ByVal Original_Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Aprobado As String,  _
                    ByVal Original_Motivo As String,  _
                    ByVal Original_URL_Certificado As String,  _
                    ByVal Original_EmailAviso As String,  _
                    ByVal Original_Enviado As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Version_Seguro As String) As Integer
            If (Original_Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cod_contrat")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Cod_contrat,String)
            End If
            If (Original_Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Distrito")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Distrito,String)
            End If
            If (Original_TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TipoContr")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TipoContr,String)
            End If
            If (Original_Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Version")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Version,String)
            End If
            If (Original_Id_verificacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Id_verificacion")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Id_verificacion,String)
            End If
            If (Original_F_inicio_declaracion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_F_inicio_declaracion,String)
            End If
            If (Original_F_term_declaracion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_F_term_declaracion,String)
            End If
            If (Original_Prima_contrat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Prima_contrat.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Mont_declarado.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Mont_declarado.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Aprobado Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Aprobado,String)
            End If
            If (Original_Motivo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Motivo,String)
            End If
            If (Original_URL_Certificado Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_URL_Certificado,String)
            End If
            If (Original_EmailAviso Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_EmailAviso,String)
            End If
            If (Original_Enviado Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Enviado,String)
            End If
            If (Original_Fecha_Creacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Fecha_Creacion,String)
            End If
            If (Original_Version_Seguro Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Version_Seguro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Cod_contrat As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Id_verificacion As String,  _
                    ByVal F_inicio_declaracion As String,  _
                    ByVal F_term_declaracion As String,  _
                    ByVal Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Aprobado As String,  _
                    ByVal Motivo As String,  _
                    ByVal URL_Certificado As String,  _
                    ByVal EmailAviso As String,  _
                    ByVal Enviado As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Version_Seguro As String) As Integer
            If (Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cod_contrat")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cod_contrat,String)
            End If
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Distrito,String)
            End If
            If (TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoContr")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TipoContr,String)
            End If
            If (Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Version,String)
            End If
            If (Id_verificacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Id_verificacion")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Id_verificacion,String)
            End If
            If (F_inicio_declaracion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(F_inicio_declaracion,String)
            End If
            If (F_term_declaracion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(F_term_declaracion,String)
            End If
            If (Prima_contrat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Prima_contrat.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Mont_declarado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Mont_declarado.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Aprobado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Aprobado,String)
            End If
            If (Motivo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Motivo,String)
            End If
            If (URL_Certificado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(URL_Certificado,String)
            End If
            If (EmailAviso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(EmailAviso,String)
            End If
            If (Enviado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Enviado,String)
            End If
            If (Fecha_Creacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Fecha_Creacion,String)
            End If
            If (Version_Seguro Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Version_Seguro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Cod_contrat As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Id_verificacion As String,  _
                    ByVal F_inicio_declaracion As String,  _
                    ByVal F_term_declaracion As String,  _
                    ByVal Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Aprobado As String,  _
                    ByVal Motivo As String,  _
                    ByVal URL_Certificado As String,  _
                    ByVal EmailAviso As String,  _
                    ByVal Enviado As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Version_Seguro As String,  _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Id_verificacion As String,  _
                    ByVal Original_F_inicio_declaracion As String,  _
                    ByVal Original_F_term_declaracion As String,  _
                    ByVal Original_Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Aprobado As String,  _
                    ByVal Original_Motivo As String,  _
                    ByVal Original_URL_Certificado As String,  _
                    ByVal Original_EmailAviso As String,  _
                    ByVal Original_Enviado As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Version_Seguro As String) As Integer
            If (Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cod_contrat")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Cod_contrat,String)
            End If
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Distrito,String)
            End If
            If (TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoContr")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TipoContr,String)
            End If
            If (Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Version,String)
            End If
            If (Id_verificacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Id_verificacion")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Id_verificacion,String)
            End If
            If (F_inicio_declaracion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(F_inicio_declaracion,String)
            End If
            If (F_term_declaracion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(F_term_declaracion,String)
            End If
            If (Prima_contrat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Prima_contrat.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Mont_declarado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Mont_declarado.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Aprobado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Aprobado,String)
            End If
            If (Motivo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Motivo,String)
            End If
            If (URL_Certificado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(URL_Certificado,String)
            End If
            If (EmailAviso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(EmailAviso,String)
            End If
            If (Enviado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Enviado,String)
            End If
            If (Fecha_Creacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Fecha_Creacion,String)
            End If
            If (Version_Seguro Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Version_Seguro,String)
            End If
            If (Original_Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cod_contrat")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Cod_contrat,String)
            End If
            If (Original_Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Distrito")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Distrito,String)
            End If
            If (Original_TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TipoContr")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TipoContr,String)
            End If
            If (Original_Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Version")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Version,String)
            End If
            If (Original_Id_verificacion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Id_verificacion")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Id_verificacion,String)
            End If
            If (Original_F_inicio_declaracion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_F_inicio_declaracion,String)
            End If
            If (Original_F_term_declaracion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_F_term_declaracion,String)
            End If
            If (Original_Prima_contrat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Prima_contrat.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Mont_declarado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Mont_declarado.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Aprobado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Aprobado,String)
            End If
            If (Original_Motivo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Motivo,String)
            End If
            If (Original_URL_Certificado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_URL_Certificado,String)
            End If
            If (Original_EmailAviso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_EmailAviso,String)
            End If
            If (Original_Enviado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Enviado,String)
            End If
            If (Original_Fecha_Creacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Fecha_Creacion,String)
            End If
            If (Original_Version_Seguro Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Version_Seguro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal F_inicio_declaracion As String,  _
                    ByVal F_term_declaracion As String,  _
                    ByVal Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Aprobado As String,  _
                    ByVal Motivo As String,  _
                    ByVal URL_Certificado As String,  _
                    ByVal EmailAviso As String,  _
                    ByVal Enviado As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Version_Seguro As String,  _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Id_verificacion As String,  _
                    ByVal Original_F_inicio_declaracion As String,  _
                    ByVal Original_F_term_declaracion As String,  _
                    ByVal Original_Prima_contrat As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Mont_declarado As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Aprobado As String,  _
                    ByVal Original_Motivo As String,  _
                    ByVal Original_URL_Certificado As String,  _
                    ByVal Original_EmailAviso As String,  _
                    ByVal Original_Enviado As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Version_Seguro As String) As Integer
            Return Me.Update(Original_Cod_contrat, Original_Distrito, Original_TipoContr, Original_Version, Original_Id_verificacion, F_inicio_declaracion, F_term_declaracion, Prima_contrat, Mont_declarado, Aprobado, Motivo, URL_Certificado, EmailAviso, Enviado, Fecha_Creacion, Version_Seguro, Original_Cod_contrat, Original_Distrito, Original_TipoContr, Original_Version, Original_Id_verificacion, Original_F_inicio_declaracion, Original_F_term_declaracion, Original_Prima_contrat, Original_Mont_declarado, Original_Aprobado, Original_Motivo, Original_URL_Certificado, Original_EmailAviso, Original_Enviado, Original_Fecha_Creacion, Original_Version_Seguro)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizarEnviados() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetUltimaVersionSeguro(ByVal Distrito As String, ByVal OC_CONT_CODIGO As String, ByVal TipoCont_OC As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                command.Parameters(0).Value = CType(Distrito,String)
            End If
            If (OC_CONT_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OC_CONT_CODIGO")
            Else
                command.Parameters(1).Value = CType(OC_CONT_CODIGO,String)
            End If
            If (TipoCont_OC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoCont_OC")
            Else
                command.Parameters(2).Value = CType(TipoCont_OC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertarInoperantes() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SegurosMARSH_ConfiguracionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SegurosMARSH_Configuracion"
            tableMapping.ColumnMappings.Add("TIPO_TABLA", "TIPO_TABLA")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Valor", "Valor")
            tableMapping.ColumnMappings.Add("Valor2", "Valor2")
            tableMapping.ColumnMappings.Add("Valor3", "Valor3")
            tableMapping.ColumnMappings.Add("Valor4", "Valor4")
            tableMapping.ColumnMappings.Add("Valor5", "Valor5")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Configuracion] ([TIPO_TABLA], [Nombre], [Valor], [Valor2], [Valor3],"& _ 
                " [Valor4], [Valor5]) VALUES (@TIPO_TABLA, @Nombre, @Valor, @Valor2, @Valor3, @Va"& _ 
                "lor4, @Valor5)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_TABLA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_TABLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valor2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valor3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valor4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Valor5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.InterfazSegurosMARSH.My.MySettings.Default.SegurosMARSHConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Configuracion.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Configuracion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        TIPO_TABLA, Nombre, Valor, Valor2, Valor3, Valor4, Valor5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "        Configuracion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (TIPO_TABLA = 'EnvioCorreo') AND (Nombre = @"& _ 
                "TipoLista)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoLista", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT      Max(Valor)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Configuracion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (TIPO_TABLA ="& _ 
                " @TipoTabla) AND (Nombre = @Nombre)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoTabla", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_TABLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetConfiguracion() As SegurosMarsh.SegurosMARSH_ConfiguracionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SegurosMarsh.SegurosMARSH_ConfiguracionDataTable = New SegurosMarsh.SegurosMARSH_ConfiguracionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetCorreos(ByVal TipoLista As String) As SegurosMarsh.SegurosMARSH_ConfiguracionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TipoLista Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoLista")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TipoLista,String)
            End If
            Dim dataTable As SegurosMarsh.SegurosMARSH_ConfiguracionDataTable = New SegurosMarsh.SegurosMARSH_ConfiguracionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SegurosMarsh.SegurosMARSH_ConfiguracionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SegurosMarsh) As Integer
            Return Me.Adapter.Update(dataSet, "SegurosMARSH_Configuracion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TIPO_TABLA As String, ByVal Nombre As String, ByVal Valor As String, ByVal Valor2 As String, ByVal Valor3 As String, ByVal Valor4 As String, ByVal Valor5 As String) As Integer
            If (TIPO_TABLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIPO_TABLA")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TIPO_TABLA,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nombre,String)
            End If
            If (Valor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Valor")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Valor,String)
            End If
            If (Valor2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Valor2,String)
            End If
            If (Valor3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Valor3,String)
            End If
            If (Valor4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Valor4,String)
            End If
            If (Valor5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Valor5,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetValor(ByVal TipoTabla As String, ByVal Nombre As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (TipoTabla Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoTabla")
            Else
                command.Parameters(0).Value = CType(TipoTabla,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nombre")
            Else
                command.Parameters(1).Value = CType(Nombre,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Ellipse_OCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Ellipse_OC"
            tableMapping.ColumnMappings.Add("DISTRITO", "DISTRITO")
            tableMapping.ColumnMappings.Add("EMPRESA", "EMPRESA")
            tableMapping.ColumnMappings.Add("RESP_CONTRAT", "RESP_CONTRAT")
            tableMapping.ColumnMappings.Add("D_ANUAL", "D_ANUAL")
            tableMapping.ColumnMappings.Add("F_INICIO_VIG", "F_INICIO_VIG")
            tableMapping.ColumnMappings.Add("F_TERM_VIG", "F_TERM_VIG")
            tableMapping.ColumnMappings.Add("N_POLIZA", "N_POLIZA")
            tableMapping.ColumnMappings.Add("RUT_CONT", "RUT_CONT")
            tableMapping.ColumnMappings.Add("DIG_RUT_CONT", "DIG_RUT_CONT")
            tableMapping.ColumnMappings.Add("R_SOC_CONT", "R_SOC_CONT")
            tableMapping.ColumnMappings.Add("DIR_CONT", "DIR_CONT")
            tableMapping.ColumnMappings.Add("CIUD_CONT", "CIUD_CONT")
            tableMapping.ColumnMappings.Add("NOMB_CONTACT", "NOMB_CONTACT")
            tableMapping.ColumnMappings.Add("COD_CONTRAT", "COD_CONTRAT")
            tableMapping.ColumnMappings.Add("MONT_CONTRAT", "MONT_CONTRAT")
            tableMapping.ColumnMappings.Add("TIP_CONTRAT", "TIP_CONTRAT")
            tableMapping.ColumnMappings.Add("DESCRIP_TRAB", "DESCRIP_TRAB")
            tableMapping.ColumnMappings.Add("MONT_ORDEN_UF", "MONT_ORDEN_UF")
            tableMapping.ColumnMappings.Add("RESPONSABLE_CONT", "RESPONSABLE_CONT")
            tableMapping.ColumnMappings.Add("EMAIL_RESPONSABLE_CONT", "EMAIL_RESPONSABLE_CONT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.InterfazSegurosMARSH.My.MySettings.Default.Ellipse
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        EMPRESA, RESP_CONTRAT, D_ANUAL, F_INICIO_VIG, F_TERM_VIG, N_POLIZA,"& _ 
                " RUT_CONT, DIG_RUT_CONT, R_SOC_CONT, DISTRITO, DIR_CONT, CIUD_CONT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               NOMB_CONTACT, COD_CONTRAT, MONT_CONTRAT, TIP_CONTRAT, DESCRIP_TRA"& _ 
                "B, MONT_ORDEN_UF, RESPONSABLE_CONT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         EMAIL_RESPONSABLE"& _ 
                "_CONT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            XSV220_SEGUROS_MARSH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetOrdenes_compra() As SegurosMarsh.Ellipse_OCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SegurosMarsh.Ellipse_OCDataTable = New SegurosMarsh.Ellipse_OCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Ellipse_ContratosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Ellipse_Contratos"
            tableMapping.ColumnMappings.Add("EMPRESA", "EMPRESA")
            tableMapping.ColumnMappings.Add("RESP_CONTRAT", "RESP_CONTRAT")
            tableMapping.ColumnMappings.Add("D_ANUAL", "D_ANUAL")
            tableMapping.ColumnMappings.Add("F_INICIO_VIG", "F_INICIO_VIG")
            tableMapping.ColumnMappings.Add("F_TERM_VIG", "F_TERM_VIG")
            tableMapping.ColumnMappings.Add("N_POLIZA", "N_POLIZA")
            tableMapping.ColumnMappings.Add("RUT_CONT", "RUT_CONT")
            tableMapping.ColumnMappings.Add("DIG_RUT_CONT", "DIG_RUT_CONT")
            tableMapping.ColumnMappings.Add("R_SOC_CONT", "R_SOC_CONT")
            tableMapping.ColumnMappings.Add("DIR_CONT", "DIR_CONT")
            tableMapping.ColumnMappings.Add("CIUD_CONT", "CIUD_CONT")
            tableMapping.ColumnMappings.Add("NOMB_CONTACT", "NOMB_CONTACT")
            tableMapping.ColumnMappings.Add("COD_CONTRAT", "COD_CONTRAT")
            tableMapping.ColumnMappings.Add("MONT_CONTRAT", "MONT_CONTRAT")
            tableMapping.ColumnMappings.Add("TIP_CONTRAT", "TIP_CONTRAT")
            tableMapping.ColumnMappings.Add("DESCRIP_TRAB", "DESCRIP_TRAB")
            tableMapping.ColumnMappings.Add("DISTRITO", "DISTRITO")
            tableMapping.ColumnMappings.Add("RESPONSABLE_CONT", "RESPONSABLE_CONT")
            tableMapping.ColumnMappings.Add("EMAIL_RESPONSABLE_CONT", "EMAIL_RESPONSABLE_CONT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.InterfazSegurosMARSH.My.MySettings.Default.Ellipse
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        EMPRESA, RESP_CONTRAT, D_ANUAL, F_INICIO_VIG, F_TERM_VIG, N_POLIZA,"& _ 
                " RUT_CONT, DIG_RUT_CONT, R_SOC_CONT, DIR_CONT, CIUD_CONT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "     NOMB_CONTACT, COD_CONTRAT, MONT_CONTRAT, TIP_CONTRAT, DESCRIP_TRAB, DISTRIT"& _ 
                "O, RESPONSABLE_CONT, EMAIL_RESPONSABLE_CONT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            XSV384_SEGUROS_MARS"& _ 
                "H"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetContratos() As SegurosMarsh.Ellipse_ContratosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SegurosMarsh.Ellipse_ContratosDataTable = New SegurosMarsh.Ellipse_ContratosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SegurosMARSH_Oc_ContratoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SegurosMARSH_Oc_Contrato"
            tableMapping.ColumnMappings.Add("Empresa", "Empresa")
            tableMapping.ColumnMappings.Add("Resp_Contrat", "Resp_Contrat")
            tableMapping.ColumnMappings.Add("D_Anual", "D_Anual")
            tableMapping.ColumnMappings.Add("F_inicio_vig", "F_inicio_vig")
            tableMapping.ColumnMappings.Add("F_term_vig", "F_term_vig")
            tableMapping.ColumnMappings.Add("N_poliza", "N_poliza")
            tableMapping.ColumnMappings.Add("Rut_cont", "Rut_cont")
            tableMapping.ColumnMappings.Add("Dig_Rut_cont", "Dig_Rut_cont")
            tableMapping.ColumnMappings.Add("R_soc_cont", "R_soc_cont")
            tableMapping.ColumnMappings.Add("Dir_cont", "Dir_cont")
            tableMapping.ColumnMappings.Add("Ciud_cont", "Ciud_cont")
            tableMapping.ColumnMappings.Add("Nomb_Contact", "Nomb_Contact")
            tableMapping.ColumnMappings.Add("Cod_contrat", "Cod_contrat")
            tableMapping.ColumnMappings.Add("Mont_contrat", "Mont_contrat")
            tableMapping.ColumnMappings.Add("Tip_contrat", "Tip_contrat")
            tableMapping.ColumnMappings.Add("Descrip_Trab", "Descrip_Trab")
            tableMapping.ColumnMappings.Add("Distrito", "Distrito")
            tableMapping.ColumnMappings.Add("TipoContr", "TipoContr")
            tableMapping.ColumnMappings.Add("Version", "Version")
            tableMapping.ColumnMappings.Add("Fecha_Creacion", "Fecha_Creacion")
            tableMapping.ColumnMappings.Add("Correo_aviso", "Correo_aviso")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Oc_Contrato] WHERE (((@IsNull_Empresa = 1 AND [Empresa] IS NULL) OR "& _ 
                "([Empresa] = @Original_Empresa)) AND ((@IsNull_Resp_Contrat = 1 AND [Resp_Contra"& _ 
                "t] IS NULL) OR ([Resp_Contrat] = @Original_Resp_Contrat)) AND ((@IsNull_D_Anual "& _ 
                "= 1 AND [D_Anual] IS NULL) OR ([D_Anual] = @Original_D_Anual)) AND ((@IsNull_F_i"& _ 
                "nicio_vig = 1 AND [F_inicio_vig] IS NULL) OR ([F_inicio_vig] = @Original_F_inici"& _ 
                "o_vig)) AND ((@IsNull_F_term_vig = 1 AND [F_term_vig] IS NULL) OR ([F_term_vig] "& _ 
                "= @Original_F_term_vig)) AND ([N_poliza] = @Original_N_poliza) AND ([Rut_cont] ="& _ 
                " @Original_Rut_cont) AND ([Dig_Rut_cont] = @Original_Dig_Rut_cont) AND ([R_soc_c"& _ 
                "ont] = @Original_R_soc_cont) AND ([Dir_cont] = @Original_Dir_cont) AND ((@IsNull"& _ 
                "_Ciud_cont = 1 AND [Ciud_cont] IS NULL) OR ([Ciud_cont] = @Original_Ciud_cont)) "& _ 
                "AND ((@IsNull_Nomb_Contact = 1 AND [Nomb_Contact] IS NULL) OR ([Nomb_Contact] = "& _ 
                "@Original_Nomb_Contact)) AND ([Cod_contrat] = @Original_Cod_contrat) AND ([Mont_"& _ 
                "contrat] = @Original_Mont_contrat) AND ((@IsNull_Tip_contrat = 1 AND [Tip_contra"& _ 
                "t] IS NULL) OR ([Tip_contrat] = @Original_Tip_contrat)) AND ((@IsNull_Descrip_Tr"& _ 
                "ab = 1 AND [Descrip_Trab] IS NULL) OR ([Descrip_Trab] = @Original_Descrip_Trab))"& _ 
                " AND ([Distrito] = @Original_Distrito) AND ([TipoContr] = @Original_TipoContr) A"& _ 
                "ND ([Version] = @Original_Version) AND ((@IsNull_Fecha_Creacion = 1 AND [Fecha_C"& _ 
                "reacion] IS NULL) OR ([Fecha_Creacion] = @Original_Fecha_Creacion)) AND ((@IsNul"& _ 
                "l_Correo_aviso = 1 AND [Correo_aviso] IS NULL) OR ([Correo_aviso] = @Original_Co"& _ 
                "rreo_aviso)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Empresa", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Empresa", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resp_Contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resp_Contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_D_Anual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_D_Anual", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_inicio_vig", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_inicio_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_term_vig", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_term_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_poliza", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_poliza", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rut_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dig_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dig_Rut_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R_soc_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R_soc_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dir_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dir_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ciud_cont", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ciud_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nomb_Contact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nomb_Contact", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mont_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tip_contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tip_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Descrip_Trab", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Descrip_Trab", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha_Creacion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Correo_aviso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Correo_aviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Oc_Contrato] ([Empresa], [Resp_Contrat], [D_Anual], [F_inicio_vig], "& _ 
                "[F_term_vig], [N_poliza], [Rut_cont], [Dig_Rut_cont], [R_soc_cont], [Dir_cont], "& _ 
                "[Ciud_cont], [Nomb_Contact], [Cod_contrat], [Mont_contrat], [Tip_contrat], [Desc"& _ 
                "rip_Trab], [Distrito], [TipoContr], [Version], [Fecha_Creacion], [Correo_aviso])"& _ 
                " VALUES (@Empresa, @Resp_Contrat, @D_Anual, @F_inicio_vig, @F_term_vig, @N_poliz"& _ 
                "a, @Rut_cont, @Dig_Rut_cont, @R_soc_cont, @Dir_cont, @Ciud_cont, @Nomb_Contact, "& _ 
                "@Cod_contrat, @Mont_contrat, @Tip_contrat, @Descrip_Trab, @Distrito, @TipoContr,"& _ 
                " @Version, @Fecha_Creacion, @Correo_aviso);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Empresa, Resp_Contrat, D_Anu"& _ 
                "al, F_inicio_vig, F_term_vig, N_poliza, Rut_cont, Dig_Rut_cont, R_soc_cont, Dir_"& _ 
                "cont, Ciud_cont, Nomb_Contact, Cod_contrat, Mont_contrat, Tip_contrat, Descrip_T"& _ 
                "rab, Distrito, TipoContr, Version, Fecha_Creacion, Correo_aviso FROM Oc_Contrato"& _ 
                " WHERE (Cod_contrat = @Cod_contrat) AND (Distrito = @Distrito) AND (TipoContr = "& _ 
                "@TipoContr) AND (Version = @Version)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Empresa", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resp_Contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@D_Anual", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_inicio_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_term_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_poliza", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_poliza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dig_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dig_Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R_soc_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R_soc_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dir_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dir_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ciud_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomb_Contact", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mont_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tip_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Descrip_Trab", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Correo_aviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Oc_Contrato] SET [Empresa] = @Empresa, [Resp_Contrat] = @Resp_Contrat, [D"& _ 
                "_Anual] = @D_Anual, [F_inicio_vig] = @F_inicio_vig, [F_term_vig] = @F_term_vig, "& _ 
                "[N_poliza] = @N_poliza, [Rut_cont] = @Rut_cont, [Dig_Rut_cont] = @Dig_Rut_cont, "& _ 
                "[R_soc_cont] = @R_soc_cont, [Dir_cont] = @Dir_cont, [Ciud_cont] = @Ciud_cont, [N"& _ 
                "omb_Contact] = @Nomb_Contact, [Cod_contrat] = @Cod_contrat, [Mont_contrat] = @Mo"& _ 
                "nt_contrat, [Tip_contrat] = @Tip_contrat, [Descrip_Trab] = @Descrip_Trab, [Distr"& _ 
                "ito] = @Distrito, [TipoContr] = @TipoContr, [Version] = @Version, [Fecha_Creacio"& _ 
                "n] = @Fecha_Creacion, [Correo_aviso] = @Correo_aviso WHERE (((@IsNull_Empresa = "& _ 
                "1 AND [Empresa] IS NULL) OR ([Empresa] = @Original_Empresa)) AND ((@IsNull_Resp_"& _ 
                "Contrat = 1 AND [Resp_Contrat] IS NULL) OR ([Resp_Contrat] = @Original_Resp_Cont"& _ 
                "rat)) AND ((@IsNull_D_Anual = 1 AND [D_Anual] IS NULL) OR ([D_Anual] = @Original"& _ 
                "_D_Anual)) AND ((@IsNull_F_inicio_vig = 1 AND [F_inicio_vig] IS NULL) OR ([F_ini"& _ 
                "cio_vig] = @Original_F_inicio_vig)) AND ((@IsNull_F_term_vig = 1 AND [F_term_vig"& _ 
                "] IS NULL) OR ([F_term_vig] = @Original_F_term_vig)) AND ([N_poliza] = @Original"& _ 
                "_N_poliza) AND ([Rut_cont] = @Original_Rut_cont) AND ([Dig_Rut_cont] = @Original"& _ 
                "_Dig_Rut_cont) AND ([R_soc_cont] = @Original_R_soc_cont) AND ([Dir_cont] = @Orig"& _ 
                "inal_Dir_cont) AND ((@IsNull_Ciud_cont = 1 AND [Ciud_cont] IS NULL) OR ([Ciud_co"& _ 
                "nt] = @Original_Ciud_cont)) AND ((@IsNull_Nomb_Contact = 1 AND [Nomb_Contact] IS"& _ 
                " NULL) OR ([Nomb_Contact] = @Original_Nomb_Contact)) AND ([Cod_contrat] = @Origi"& _ 
                "nal_Cod_contrat) AND ([Mont_contrat] = @Original_Mont_contrat) AND ((@IsNull_Tip"& _ 
                "_contrat = 1 AND [Tip_contrat] IS NULL) OR ([Tip_contrat] = @Original_Tip_contra"& _ 
                "t)) AND ((@IsNull_Descrip_Trab = 1 AND [Descrip_Trab] IS NULL) OR ([Descrip_Trab"& _ 
                "] = @Original_Descrip_Trab)) AND ([Distrito] = @Original_Distrito) AND ([TipoCon"& _ 
                "tr] = @Original_TipoContr) AND ([Version] = @Original_Version) AND ((@IsNull_Fec"& _ 
                "ha_Creacion = 1 AND [Fecha_Creacion] IS NULL) OR ([Fecha_Creacion] = @Original_F"& _ 
                "echa_Creacion)) AND ((@IsNull_Correo_aviso = 1 AND [Correo_aviso] IS NULL) OR (["& _ 
                "Correo_aviso] = @Original_Correo_aviso)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Empresa, Resp_Contrat, D_Anua"& _ 
                "l, F_inicio_vig, F_term_vig, N_poliza, Rut_cont, Dig_Rut_cont, R_soc_cont, Dir_c"& _ 
                "ont, Ciud_cont, Nomb_Contact, Cod_contrat, Mont_contrat, Tip_contrat, Descrip_Tr"& _ 
                "ab, Distrito, TipoContr, Version, Fecha_Creacion, Correo_aviso FROM Oc_Contrato "& _ 
                "WHERE (Cod_contrat = @Cod_contrat) AND (Distrito = @Distrito) AND (TipoContr = @"& _ 
                "TipoContr) AND (Version = @Version)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Empresa", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resp_Contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@D_Anual", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_inicio_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_term_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_poliza", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_poliza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dig_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dig_Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R_soc_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R_soc_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dir_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dir_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ciud_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomb_Contact", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mont_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tip_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Descrip_Trab", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Correo_aviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Empresa", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Empresa", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Empresa", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resp_Contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resp_Contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resp_Contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_D_Anual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_D_Anual", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_inicio_vig", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_inicio_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_F_term_vig", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_F_term_vig", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_poliza", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_poliza", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rut_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dig_Rut_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dig_Rut_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_R_soc_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "R_soc_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dir_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dir_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ciud_cont", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ciud_cont", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ciud_cont", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nomb_Contact", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nomb_Contact", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nomb_Contact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cod_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mont_contrat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tip_contrat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tip_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Descrip_Trab", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Descrip_Trab", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Descrip_Trab", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Distrito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TipoContr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Version", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Fecha_Creacion", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Fecha_Creacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fecha_Creacion", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Correo_aviso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Correo_aviso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Correo_aviso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.InterfazSegurosMARSH.My.MySettings.Default.SegurosMARSHConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Empresa, Resp_Contrat, D_Anual, F_inicio_vig, F_term_vig, N_poliza,"& _ 
                " Rut_cont, Dig_Rut_cont, R_soc_cont, Dir_cont, Ciud_cont, Nomb_Contact, Cod_cont"& _ 
                "rat, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Mont_contrat, Tip_contrat, Descrip_Trab, Distrit"& _ 
                "o, TipoContr, Version, Fecha_Creacion, Correo_aviso"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Oc_Contrato"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        COUNT(*) AS Cantidad_OC_CONT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Oc_Contrato"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (Distrito = @Distrito) AND (Cod_contrat = @OC_Contrat) AND (D_Anual = @D_An"& _ 
                "ual) AND (F_inicio_vig = @F_inicio_vig) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (F_term_v"& _ 
                "ig = @F_Term_vig) AND (N_poliza = @N_Poliza) AND (Rut_cont = @Rut_Cont) AND (Dig"& _ 
                "_Rut_cont = @Dig_Rut_cont) AND (Mont_contrat = @Monto_Contrat) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "        AND (RTRIM(Descrip_Trab) =RTRIM(@Descrip_Trab)) AND (RTRIM(Empresa) =RTR"& _ 
                "IM(@Empresa)) AND (RTRIM(Resp_Contrat) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         = RTRIM(@Resp_"& _ 
                "Contrat)) AND (RTRIM(Dir_cont) = RTRIM(@Dir_Cont)) AND (RTRIM(R_soc_cont) = RTRI"& _ 
                "M(@R_Soc_Cont)) AND (RTRIM(Ciud_cont) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         = RTRIM(@Ciud_C"& _ 
                "ont)) AND (RTRIM(Nomb_Contact) = rTRIM(@Nomb_Contact))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND  (Tip_contrat = @Tip"& _ 
                "oContrato) AND (TipoContr = @Tipo) "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OC_Contrat", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@D_Anual", Global.System.Data.SqlDbType.VarChar, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "D_Anual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_inicio_vig", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "F_inicio_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@F_Term_vig", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "F_term_vig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_Poliza", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "N_poliza", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rut_Cont", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dig_Rut_cont", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Dig_Rut_cont", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto_Contrat", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "Mont_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Descrip_Trab", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Empresa", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resp_Contrat", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dir_Cont", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@R_Soc_Cont", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ciud_Cont", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nomb_Contact", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoContrato", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Tip_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        COUNT(*) AS Cantidad_OC_CONT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Oc_Contrato"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "     (Distrito = @Distrito) AND (TipoContr = @Tipo)  AND (Cod_contrat = @OC_Cont"& _ 
                "rat)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OC_Contrat", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        '<?xml version=""1.0"" encoding=""iso-8859-1"" ?> <Carga_Contrat> <Empr"& _ 
                "esa>' + Empresa + '</Empresa>' + '<Resp_Contrat>' + Resp_Contrat + '</Resp_Contr"& _ 
                "at>' + '<D_Anual>'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          + D_Anual + '</D_Anual>' + '<F_ini"& _ 
                "cio_vig>' + F_inicio_vig + '</F_inicio_vig>' + '<F_term_vig>' + F_term_vig + '</"& _ 
                "F_term_vig>' + '<N_poliza>' + N_poliza + '</N_poliza>'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                "  + '<Contratista>' + '<Rut_cont>' + Rut_cont + '</Rut_cont>' + '<Dig_Rut_cont>'"& _ 
                " + Dig_Rut_cont + '</Dig_Rut_cont>' + '<R_soc_cont>' + R_soc_cont + '</R_soc_con"& _ 
                "t>' +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          '<Dir_cont>' + Dir_cont + '</Dir_cont>' + '<Ciu"& _ 
                "d_cont>' + Ciud_cont + '</Ciud_cont>' + '<Nomb_Contact>' + Nomb_Contact + '</Nom"& _ 
                "b_Contact>' + '</Contratista>' + '<Cod_contrat>'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          + Co"& _ 
                "d_contrat + @Version_Seguro + '</Cod_contrat>' + '<Mont_contrat>' + STR(Mont_con"& _ 
                "trat) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         + '</Mont_contrat>' + '<Tip_contrat>' + Tip_con"& _ 
                "trat + '</Tip_contrat>' + '<Descrip_Trab>' + Descrip_Trab + '</Descrip_Trab>' + "& _ 
                "'</Carga_Contrat> ' AS XML_Fila"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Oc_Contrato"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Cod_"& _ 
                "contrat = @OC_Contrato) AND (Distrito = @Distrito) AND (TipoContr = @Tipo) AND ("& _ 
                "Version = @Version)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version_Seguro", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OC_Contrato", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Version", Global.System.Data.SqlDbType.VarChar, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Version", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Ciud_cont, Cod_contrat, Correo_aviso, D_Anual, Descrip_Trab, Dig_Rut_cont,"& _ 
                " Dir_cont, Distrito, Empresa, F_inicio_vig, F_term_vig, Fecha_Creacion, Mont_con"& _ 
                "trat, N_poliza, Nomb_Contact, R_soc_cont, Resp_Contrat, Rut_cont, Tip_contrat, T"& _ 
                "ipoContr, Version FROM Oc_Contrato AS a WHERE (Cod_contrat NOT IN (SELECT Cod_co"& _ 
                "ntrat FROM Seguro AS b WHERE (Distrito = a.Distrito) AND (a.Version = Version)))"& _ 
                " AND (TipoContr = 'C')"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT Ciud_cont, Cod_contrat, Correo_aviso, D_Anual, Descrip_Trab, Dig_Rut_cont,"& _ 
                " Dir_cont, Distrito, Empresa, F_inicio_vig, F_term_vig, Fecha_Creacion, Mont_con"& _ 
                "trat, N_poliza, Nomb_Contact, R_soc_cont, Resp_Contrat, Rut_cont, Tip_contrat, T"& _ 
                "ipoContr, Version FROM Oc_Contrato AS a WHERE (Cod_contrat NOT IN (SELECT Cod_co"& _ 
                "ntrat FROM Seguro AS b WHERE (Distrito = a.Distrito) AND (a.Version = Version)))"& _ 
                " AND (TipoContr = 'O')"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT Ciud_cont, Cod_contrat, Correo_aviso, D_Anual, Descrip_Trab, Dig_Rut_cont,"& _ 
                " Dir_cont, Distrito, Empresa, F_inicio_vig, F_term_vig, Fecha_Creacion, Mont_con"& _ 
                "trat, N_poliza, Nomb_Contact, R_soc_cont, Resp_Contrat, Rut_cont, Tip_contrat, T"& _ 
                "ipoContr, Version FROM Oc_Contrato AS a WHERE (Cod_contrat NOT IN (SELECT Cod_co"& _ 
                "ntrat FROM Seguro AS b WHERE (Distrito = a.Distrito) AND (a.Version = Version)))"& _ 
                ""
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT        MAX(Version) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Oc_Contrato"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (D"& _ 
                "istrito = @Distrito) AND (Cod_contrat = @OC_CONT_CODIGO) AND (TipoContr = @TipoC"& _ 
                "ont_OC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY TipoContr"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Distrito", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Distrito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OC_CONT_CODIGO", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Cod_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TipoCont_OC", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TipoContr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function Get_OC_CONT_MARCH() As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable = New SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetContratosSinSeguro() As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Dim dataTable As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable = New SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetOCSinSeguro() As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Dim dataTable As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable = New SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetSinSeguros() As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Dim dataTable As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable = New SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SegurosMarsh.SegurosMARSH_Oc_ContratoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SegurosMarsh) As Integer
            Return Me.Adapter.Update(dataSet, "SegurosMARSH_Oc_Contrato")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Empresa As String,  _
                    ByVal Original_Resp_Contrat As String,  _
                    ByVal Original_D_Anual As String,  _
                    ByVal Original_F_inicio_vig As String,  _
                    ByVal Original_F_term_vig As String,  _
                    ByVal Original_N_poliza As String,  _
                    ByVal Original_Rut_cont As String,  _
                    ByVal Original_Dig_Rut_cont As String,  _
                    ByVal Original_R_soc_cont As String,  _
                    ByVal Original_Dir_cont As String,  _
                    ByVal Original_Ciud_cont As String,  _
                    ByVal Original_Nomb_Contact As String,  _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Mont_contrat As Decimal,  _
                    ByVal Original_Tip_contrat As String,  _
                    ByVal Original_Descrip_Trab As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Correo_aviso As String) As Integer
            If (Original_Empresa Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Empresa,String)
            End If
            If (Original_Resp_Contrat Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Resp_Contrat,String)
            End If
            If (Original_D_Anual Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_D_Anual,String)
            End If
            If (Original_F_inicio_vig Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_F_inicio_vig,String)
            End If
            If (Original_F_term_vig Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_F_term_vig,String)
            End If
            If (Original_N_poliza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_N_poliza")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_N_poliza,String)
            End If
            If (Original_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Rut_cont")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Rut_cont,String)
            End If
            If (Original_Dig_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dig_Rut_cont")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Dig_Rut_cont,String)
            End If
            If (Original_R_soc_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_R_soc_cont")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_R_soc_cont,String)
            End If
            If (Original_Dir_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dir_cont")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Dir_cont,String)
            End If
            If (Original_Ciud_cont Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Ciud_cont,String)
            End If
            If (Original_Nomb_Contact Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Nomb_Contact,String)
            End If
            If (Original_Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cod_contrat")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Cod_contrat,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Mont_contrat,Decimal)
            If (Original_Tip_contrat Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Tip_contrat,String)
            End If
            If (Original_Descrip_Trab Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Descrip_Trab,String)
            End If
            If (Original_Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Distrito")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_Distrito,String)
            End If
            If (Original_TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TipoContr")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_TipoContr,String)
            End If
            If (Original_Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Version")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_Version,String)
            End If
            If (Original_Fecha_Creacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Fecha_Creacion,String)
            End If
            If (Original_Correo_aviso Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_Correo_aviso,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Empresa As String,  _
                    ByVal Resp_Contrat As String,  _
                    ByVal D_Anual As String,  _
                    ByVal F_inicio_vig As String,  _
                    ByVal F_term_vig As String,  _
                    ByVal N_poliza As String,  _
                    ByVal Rut_cont As String,  _
                    ByVal Dig_Rut_cont As String,  _
                    ByVal R_soc_cont As String,  _
                    ByVal Dir_cont As String,  _
                    ByVal Ciud_cont As String,  _
                    ByVal Nomb_Contact As String,  _
                    ByVal Cod_contrat As String,  _
                    ByVal Mont_contrat As Decimal,  _
                    ByVal Tip_contrat As String,  _
                    ByVal Descrip_Trab As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Correo_aviso As String) As Integer
            If (Empresa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Empresa,String)
            End If
            If (Resp_Contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Resp_Contrat,String)
            End If
            If (D_Anual Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(D_Anual,String)
            End If
            If (F_inicio_vig Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(F_inicio_vig,String)
            End If
            If (F_term_vig Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(F_term_vig,String)
            End If
            If (N_poliza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("N_poliza")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(N_poliza,String)
            End If
            If (Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rut_cont")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Rut_cont,String)
            End If
            If (Dig_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dig_Rut_cont")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Dig_Rut_cont,String)
            End If
            If (R_soc_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("R_soc_cont")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(R_soc_cont,String)
            End If
            If (Dir_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dir_cont")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Dir_cont,String)
            End If
            If (Ciud_cont Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Ciud_cont,String)
            End If
            If (Nomb_Contact Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Nomb_Contact,String)
            End If
            If (Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cod_contrat")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Cod_contrat,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(Mont_contrat,Decimal)
            If (Tip_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Tip_contrat,String)
            End If
            If (Descrip_Trab Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Descrip_Trab,String)
            End If
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Distrito,String)
            End If
            If (TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoContr")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TipoContr,String)
            End If
            If (Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Version,String)
            End If
            If (Fecha_Creacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Fecha_Creacion,String)
            End If
            If (Correo_aviso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Correo_aviso,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Empresa As String,  _
                    ByVal Resp_Contrat As String,  _
                    ByVal D_Anual As String,  _
                    ByVal F_inicio_vig As String,  _
                    ByVal F_term_vig As String,  _
                    ByVal N_poliza As String,  _
                    ByVal Rut_cont As String,  _
                    ByVal Dig_Rut_cont As String,  _
                    ByVal R_soc_cont As String,  _
                    ByVal Dir_cont As String,  _
                    ByVal Ciud_cont As String,  _
                    ByVal Nomb_Contact As String,  _
                    ByVal Cod_contrat As String,  _
                    ByVal Mont_contrat As Decimal,  _
                    ByVal Tip_contrat As String,  _
                    ByVal Descrip_Trab As String,  _
                    ByVal Distrito As String,  _
                    ByVal TipoContr As String,  _
                    ByVal Version As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Correo_aviso As String,  _
                    ByVal Original_Empresa As String,  _
                    ByVal Original_Resp_Contrat As String,  _
                    ByVal Original_D_Anual As String,  _
                    ByVal Original_F_inicio_vig As String,  _
                    ByVal Original_F_term_vig As String,  _
                    ByVal Original_N_poliza As String,  _
                    ByVal Original_Rut_cont As String,  _
                    ByVal Original_Dig_Rut_cont As String,  _
                    ByVal Original_R_soc_cont As String,  _
                    ByVal Original_Dir_cont As String,  _
                    ByVal Original_Ciud_cont As String,  _
                    ByVal Original_Nomb_Contact As String,  _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Mont_contrat As Decimal,  _
                    ByVal Original_Tip_contrat As String,  _
                    ByVal Original_Descrip_Trab As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Correo_aviso As String) As Integer
            If (Empresa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Empresa,String)
            End If
            If (Resp_Contrat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Resp_Contrat,String)
            End If
            If (D_Anual Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(D_Anual,String)
            End If
            If (F_inicio_vig Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(F_inicio_vig,String)
            End If
            If (F_term_vig Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(F_term_vig,String)
            End If
            If (N_poliza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("N_poliza")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(N_poliza,String)
            End If
            If (Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rut_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Rut_cont,String)
            End If
            If (Dig_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dig_Rut_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Dig_Rut_cont,String)
            End If
            If (R_soc_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("R_soc_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(R_soc_cont,String)
            End If
            If (Dir_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dir_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Dir_cont,String)
            End If
            If (Ciud_cont Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Ciud_cont,String)
            End If
            If (Nomb_Contact Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Nomb_Contact,String)
            End If
            If (Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cod_contrat")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Cod_contrat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Mont_contrat,Decimal)
            If (Tip_contrat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Tip_contrat,String)
            End If
            If (Descrip_Trab Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Descrip_Trab,String)
            End If
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Distrito,String)
            End If
            If (TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoContr")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TipoContr,String)
            End If
            If (Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Version,String)
            End If
            If (Fecha_Creacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Fecha_Creacion,String)
            End If
            If (Correo_aviso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Correo_aviso,String)
            End If
            If (Original_Empresa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Empresa,String)
            End If
            If (Original_Resp_Contrat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Resp_Contrat,String)
            End If
            If (Original_D_Anual Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_D_Anual,String)
            End If
            If (Original_F_inicio_vig Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_F_inicio_vig,String)
            End If
            If (Original_F_term_vig Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_F_term_vig,String)
            End If
            If (Original_N_poliza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_N_poliza")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_N_poliza,String)
            End If
            If (Original_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Rut_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Rut_cont,String)
            End If
            If (Original_Dig_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dig_Rut_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Dig_Rut_cont,String)
            End If
            If (Original_R_soc_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_R_soc_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_R_soc_cont,String)
            End If
            If (Original_Dir_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dir_cont")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Dir_cont,String)
            End If
            If (Original_Ciud_cont Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Ciud_cont,String)
            End If
            If (Original_Nomb_Contact Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Nomb_Contact,String)
            End If
            If (Original_Cod_contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cod_contrat")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Cod_contrat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Mont_contrat,Decimal)
            If (Original_Tip_contrat Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Tip_contrat,String)
            End If
            If (Original_Descrip_Trab Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Descrip_Trab,String)
            End If
            If (Original_Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Distrito")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Distrito,String)
            End If
            If (Original_TipoContr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TipoContr")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_TipoContr,String)
            End If
            If (Original_Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Version")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Version,String)
            End If
            If (Original_Fecha_Creacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Fecha_Creacion,String)
            End If
            If (Original_Correo_aviso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Correo_aviso,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Empresa As String,  _
                    ByVal Resp_Contrat As String,  _
                    ByVal D_Anual As String,  _
                    ByVal F_inicio_vig As String,  _
                    ByVal F_term_vig As String,  _
                    ByVal N_poliza As String,  _
                    ByVal Rut_cont As String,  _
                    ByVal Dig_Rut_cont As String,  _
                    ByVal R_soc_cont As String,  _
                    ByVal Dir_cont As String,  _
                    ByVal Ciud_cont As String,  _
                    ByVal Nomb_Contact As String,  _
                    ByVal Mont_contrat As Decimal,  _
                    ByVal Tip_contrat As String,  _
                    ByVal Descrip_Trab As String,  _
                    ByVal Fecha_Creacion As String,  _
                    ByVal Correo_aviso As String,  _
                    ByVal Original_Empresa As String,  _
                    ByVal Original_Resp_Contrat As String,  _
                    ByVal Original_D_Anual As String,  _
                    ByVal Original_F_inicio_vig As String,  _
                    ByVal Original_F_term_vig As String,  _
                    ByVal Original_N_poliza As String,  _
                    ByVal Original_Rut_cont As String,  _
                    ByVal Original_Dig_Rut_cont As String,  _
                    ByVal Original_R_soc_cont As String,  _
                    ByVal Original_Dir_cont As String,  _
                    ByVal Original_Ciud_cont As String,  _
                    ByVal Original_Nomb_Contact As String,  _
                    ByVal Original_Cod_contrat As String,  _
                    ByVal Original_Mont_contrat As Decimal,  _
                    ByVal Original_Tip_contrat As String,  _
                    ByVal Original_Descrip_Trab As String,  _
                    ByVal Original_Distrito As String,  _
                    ByVal Original_TipoContr As String,  _
                    ByVal Original_Version As String,  _
                    ByVal Original_Fecha_Creacion As String,  _
                    ByVal Original_Correo_aviso As String) As Integer
            Return Me.Update(Empresa, Resp_Contrat, D_Anual, F_inicio_vig, F_term_vig, N_poliza, Rut_cont, Dig_Rut_cont, R_soc_cont, Dir_cont, Ciud_cont, Nomb_Contact, Original_Cod_contrat, Mont_contrat, Tip_contrat, Descrip_Trab, Original_Distrito, Original_TipoContr, Original_Version, Fecha_Creacion, Correo_aviso, Original_Empresa, Original_Resp_Contrat, Original_D_Anual, Original_F_inicio_vig, Original_F_term_vig, Original_N_poliza, Original_Rut_cont, Original_Dig_Rut_cont, Original_R_soc_cont, Original_Dir_cont, Original_Ciud_cont, Original_Nomb_Contact, Original_Cod_contrat, Original_Mont_contrat, Original_Tip_contrat, Original_Descrip_Trab, Original_Distrito, Original_TipoContr, Original_Version, Original_Fecha_Creacion, Original_Correo_aviso)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Existe_Identico( _
                    ByVal Distrito As String,  _
                    ByVal OC_Contrat As String,  _
                    ByVal D_Anual As String,  _
                    ByVal F_inicio_vig As String,  _
                    ByVal F_Term_vig As String,  _
                    ByVal N_Poliza As String,  _
                    ByVal Rut_Cont As String,  _
                    ByVal Dig_Rut_cont As String,  _
                    ByVal Monto_Contrat As Decimal,  _
                    ByVal Descrip_Trab As String,  _
                    ByVal Empresa As String,  _
                    ByVal Resp_Contrat As String,  _
                    ByVal Dir_Cont As String,  _
                    ByVal R_Soc_Cont As String,  _
                    ByVal Ciud_Cont As String,  _
                    ByVal Nomb_Contact As String,  _
                    ByVal TipoContrato As String,  _
                    ByVal Tipo As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                command.Parameters(0).Value = CType(Distrito,String)
            End If
            If (OC_Contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OC_Contrat")
            Else
                command.Parameters(1).Value = CType(OC_Contrat,String)
            End If
            If (D_Anual Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(D_Anual,String)
            End If
            If (F_inicio_vig Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(F_inicio_vig,String)
            End If
            If (F_Term_vig Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(F_Term_vig,String)
            End If
            If (N_Poliza Is Nothing) Then
                Throw New Global.System.ArgumentNullException("N_Poliza")
            Else
                command.Parameters(5).Value = CType(N_Poliza,String)
            End If
            If (Rut_Cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rut_Cont")
            Else
                command.Parameters(6).Value = CType(Rut_Cont,String)
            End If
            If (Dig_Rut_cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dig_Rut_cont")
            Else
                command.Parameters(7).Value = CType(Dig_Rut_cont,String)
            End If
            command.Parameters(8).Value = CType(Monto_Contrat,Decimal)
            If (Descrip_Trab Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Descrip_Trab")
            Else
                command.Parameters(9).Value = CType(Descrip_Trab,String)
            End If
            If (Empresa Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Empresa")
            Else
                command.Parameters(10).Value = CType(Empresa,String)
            End If
            If (Resp_Contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Resp_Contrat")
            Else
                command.Parameters(11).Value = CType(Resp_Contrat,String)
            End If
            If (Dir_Cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dir_Cont")
            Else
                command.Parameters(12).Value = CType(Dir_Cont,String)
            End If
            If (R_Soc_Cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("R_Soc_Cont")
            Else
                command.Parameters(13).Value = CType(R_Soc_Cont,String)
            End If
            If (Ciud_Cont Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ciud_Cont")
            Else
                command.Parameters(14).Value = CType(Ciud_Cont,String)
            End If
            If (Nomb_Contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nomb_Contact")
            Else
                command.Parameters(15).Value = CType(Nomb_Contact,String)
            End If
            If (TipoContrato Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(TipoContrato,String)
            End If
            If (Tipo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipo")
            Else
                command.Parameters(17).Value = CType(Tipo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Existe_OC_Contrato(ByVal Distrito As String, ByVal Tipo As String, ByVal OC_Contrat As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                command.Parameters(0).Value = CType(Distrito,String)
            End If
            If (Tipo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipo")
            Else
                command.Parameters(1).Value = CType(Tipo,String)
            End If
            If (OC_Contrat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OC_Contrat")
            Else
                command.Parameters(2).Value = CType(OC_Contrat,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Get_XML_CONTRATO_OC(ByVal Version_Seguro As String, ByVal OC_Contrato As String, ByVal Distrito As String, ByVal Tipo As String, ByVal Version As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Version_Seguro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version_Seguro")
            Else
                command.Parameters(0).Value = CType(Version_Seguro,String)
            End If
            If (OC_Contrato Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OC_Contrato")
            Else
                command.Parameters(1).Value = CType(OC_Contrato,String)
            End If
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                command.Parameters(2).Value = CType(Distrito,String)
            End If
            If (Tipo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Tipo")
            Else
                command.Parameters(3).Value = CType(Tipo,String)
            End If
            If (Version Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Version")
            Else
                command.Parameters(4).Value = CType(Version,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetUltimaVersion(ByVal Distrito As String, ByVal OC_CONT_CODIGO As String, ByVal TipoCont_OC As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            If (Distrito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Distrito")
            Else
                command.Parameters(0).Value = CType(Distrito,String)
            End If
            If (OC_CONT_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OC_CONT_CODIGO")
            Else
                command.Parameters(1).Value = CType(OC_CONT_CODIGO,String)
            End If
            If (TipoCont_OC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoCont_OC")
            Else
                command.Parameters(2).Value = CType(TipoCont_OC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _segurosMARSH_SeguroTableAdapter As SegurosMARSH_SeguroTableAdapter
        
        Private _segurosMARSH_ConfiguracionTableAdapter As SegurosMARSH_ConfiguracionTableAdapter
        
        Private _segurosMARSH_Oc_ContratoTableAdapter As SegurosMARSH_Oc_ContratoTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SegurosMARSH_SeguroTableAdapter() As SegurosMARSH_SeguroTableAdapter
            Get
                Return Me._segurosMARSH_SeguroTableAdapter
            End Get
            Set
                Me._segurosMARSH_SeguroTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SegurosMARSH_ConfiguracionTableAdapter() As SegurosMARSH_ConfiguracionTableAdapter
            Get
                Return Me._segurosMARSH_ConfiguracionTableAdapter
            End Get
            Set
                Me._segurosMARSH_ConfiguracionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SegurosMARSH_Oc_ContratoTableAdapter() As SegurosMARSH_Oc_ContratoTableAdapter
            Get
                Return Me._segurosMARSH_Oc_ContratoTableAdapter
            End Get
            Set
                Me._segurosMARSH_Oc_ContratoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._segurosMARSH_SeguroTableAdapter.Connection) Is Nothing)) Then
                    Return Me._segurosMARSH_SeguroTableAdapter.Connection
                End If
                If ((Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._segurosMARSH_ConfiguracionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._segurosMARSH_ConfiguracionTableAdapter.Connection
                End If
                If ((Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._segurosMARSH_Oc_ContratoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._segurosMARSH_Oc_ContratoTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As SegurosMarsh, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Oc_Contrato.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._segurosMARSH_Oc_ContratoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Seguro.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._segurosMARSH_SeguroTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Configuracion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._segurosMARSH_ConfiguracionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As SegurosMarsh, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Oc_Contrato.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._segurosMARSH_Oc_ContratoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Seguro.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._segurosMARSH_SeguroTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Configuracion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._segurosMARSH_ConfiguracionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As SegurosMarsh, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Configuracion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._segurosMARSH_ConfiguracionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Seguro.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._segurosMARSH_SeguroTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SegurosMARSH_Oc_Contrato.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._segurosMARSH_Oc_ContratoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As SegurosMarsh) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._segurosMARSH_SeguroTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._segurosMARSH_ConfiguracionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._segurosMARSH_Oc_ContratoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._segurosMARSH_SeguroTableAdapter, Me._segurosMARSH_SeguroTableAdapter.Connection)
                    Me._segurosMARSH_SeguroTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_SeguroTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._segurosMARSH_SeguroTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._segurosMARSH_SeguroTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._segurosMARSH_SeguroTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._segurosMARSH_ConfiguracionTableAdapter, Me._segurosMARSH_ConfiguracionTableAdapter.Connection)
                    Me._segurosMARSH_ConfiguracionTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_ConfiguracionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._segurosMARSH_ConfiguracionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._segurosMARSH_ConfiguracionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._segurosMARSH_ConfiguracionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._segurosMARSH_Oc_ContratoTableAdapter, Me._segurosMARSH_Oc_ContratoTableAdapter.Connection)
                    Me._segurosMARSH_Oc_ContratoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_Oc_ContratoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._segurosMARSH_Oc_ContratoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._segurosMARSH_Oc_ContratoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._segurosMARSH_Oc_ContratoTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._segurosMARSH_SeguroTableAdapter) Is Nothing) Then
                    Me._segurosMARSH_SeguroTableAdapter.Connection = CType(revertConnections(Me._segurosMARSH_SeguroTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_SeguroTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._segurosMARSH_ConfiguracionTableAdapter) Is Nothing) Then
                    Me._segurosMARSH_ConfiguracionTableAdapter.Connection = CType(revertConnections(Me._segurosMARSH_ConfiguracionTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_ConfiguracionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._segurosMARSH_Oc_ContratoTableAdapter) Is Nothing) Then
                    Me._segurosMARSH_Oc_ContratoTableAdapter.Connection = CType(revertConnections(Me._segurosMARSH_Oc_ContratoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._segurosMARSH_Oc_ContratoTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
